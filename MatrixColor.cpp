/*
 * SmartMatrix Library - Methods for color values and color correction
 *
 * Copyright (c) 2014 Louis Beaudoin (Pixelmatix)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#include "MatrixCommon.h"

colorCorrectionModes ccmode = cc48;

// source - somewhere on the internet (arduino forum?)
static const uint8_t lightPowerMap8bit[256] = {
    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
    4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6,
    7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10, 11,
    11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 16, 16, 17,
    17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24,
    25, 25, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 32, 32, 33, 34,
    34, 35, 36, 37, 37, 38, 39, 39, 40, 41, 42, 43, 43, 44, 45, 46,
    47, 47, 48, 49, 50, 51, 52, 53, 54, 54, 55, 56, 57, 58, 59, 60,
    61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77,
    79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 94, 95, 96, 98,
    99, 100, 102, 103, 105, 106, 108, 109, 110, 112, 113, 115, 116, 118, 120, 121,
    123, 124, 126, 128, 129, 131, 132, 134, 136, 138, 139, 141, 143, 145, 146, 148,
    150, 152, 154, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179,
    181, 183, 185, 187, 189, 191, 193, 196, 198, 200, 202, 204, 207, 209, 211, 214,
    216, 218, 220, 223, 225, 228, 230, 232, 235, 237, 240, 242, 245, 247, 250, 252
};


// generated by adafruit utility included with matrix library
// options: planes = 16 and GAMMA = 2.5
static const uint16_t lightPowerMap16bit[] = {
    0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x06, 0x08,
    0x0b, 0x0f, 0x14, 0x19, 0x1f, 0x26, 0x2e, 0x37,
    0x41, 0x4b, 0x57, 0x63, 0x71, 0x80, 0x8f, 0xa0,
    0xb2, 0xc5, 0xda, 0xef, 0x106, 0x11e, 0x137, 0x152,
    0x16e, 0x18b, 0x1a9, 0x1c9, 0x1eb, 0x20e, 0x232, 0x257,
    0x27f, 0x2a7, 0x2d2, 0x2fd, 0x32b, 0x359, 0x38a, 0x3bc,
    0x3ef, 0x425, 0x45c, 0x494, 0x4cf, 0x50b, 0x548, 0x588,
    0x5c9, 0x60c, 0x651, 0x698, 0x6e0, 0x72a, 0x776, 0x7c4,
    0x814, 0x866, 0x8b9, 0x90f, 0x967, 0x9c0, 0xa1b, 0xa79,
    0xad8, 0xb3a, 0xb9d, 0xc03, 0xc6a, 0xcd4, 0xd3f, 0xdad,
    0xe1d, 0xe8f, 0xf03, 0xf79, 0xff2, 0x106c, 0x10e9, 0x1168,
    0x11e9, 0x126c, 0x12f2, 0x137a, 0x1404, 0x1490, 0x151f, 0x15b0,
    0x1643, 0x16d9, 0x1771, 0x180b, 0x18a7, 0x1946, 0x19e8, 0x1a8b,
    0x1b32, 0x1bda, 0x1c85, 0x1d33, 0x1de2, 0x1e95, 0x1f49, 0x2001,
    0x20bb, 0x2177, 0x2236, 0x22f7, 0x23bb, 0x2481, 0x254a, 0x2616,
    0x26e4, 0x27b5, 0x2888, 0x295e, 0x2a36, 0x2b11, 0x2bef, 0x2cd0,
    0x2db3, 0x2e99, 0x2f81, 0x306d, 0x315a, 0x324b, 0x333f, 0x3435,
    0x352e, 0x3629, 0x3728, 0x3829, 0x392d, 0x3a33, 0x3b3d, 0x3c49,
    0x3d59, 0x3e6b, 0x3f80, 0x4097, 0x41b2, 0x42d0, 0x43f0, 0x4513,
    0x463a, 0x4763, 0x488f, 0x49be, 0x4af0, 0x4c25, 0x4d5d, 0x4e97,
    0x4fd5, 0x5116, 0x525a, 0x53a1, 0x54eb, 0x5638, 0x5787, 0x58da,
    0x5a31, 0x5b8a, 0x5ce6, 0x5e45, 0x5fa7, 0x610d, 0x6276, 0x63e1,
    0x6550, 0x66c2, 0x6837, 0x69af, 0x6b2b, 0x6caa, 0x6e2b, 0x6fb0,
    0x7139, 0x72c4, 0x7453, 0x75e5, 0x777a, 0x7912, 0x7aae, 0x7c4c,
    0x7def, 0x7f94, 0x813d, 0x82e9, 0x8498, 0x864b, 0x8801, 0x89ba,
    0x8b76, 0x8d36, 0x8efa, 0x90c0, 0x928a, 0x9458, 0x9629, 0x97fd,
    0x99d4, 0x9bb0, 0x9d8e, 0x9f70, 0xa155, 0xa33e, 0xa52a, 0xa71a,
    0xa90d, 0xab04, 0xacfe, 0xaefb, 0xb0fc, 0xb301, 0xb509, 0xb715,
    0xb924, 0xbb37, 0xbd4d, 0xbf67, 0xc184, 0xc3a5, 0xc5ca, 0xc7f2,
    0xca1e, 0xcc4d, 0xce80, 0xd0b7, 0xd2f1, 0xd52f, 0xd771, 0xd9b6,
    0xdbfe, 0xde4b, 0xe09b, 0xe2ef, 0xe547, 0xe7a2, 0xea01, 0xec63,
    0xeeca, 0xf134, 0xf3a2, 0xf613, 0xf888, 0xfb02, 0xfd7e, 0xffff
};

/* Dithered luminance correction table - autogenerated by gamma.py */
#define DITHER_BITS 3
static const uint16_t lightPowerMap16bitDithering[] = {
    0x0,0x0,0x0,0x1,0x2,0x3,0x6,0x8,0xb,0xf,0x14,0x19,0x1f,0x26,0x2e,0x36,0x40,0x4a,0x56,0x62,0x70,0x7e,0x8e,0x9f,0xb0,0xc3,0xd7,0xed,0x103,0x11b,0x134,0x14e,0x16a,0x187,0x1a5,0x1c5,0x1e6,0x208,0x22c,0x252,0x278,0x2a1,0x2ca,0x2f6,0x323,0x351,0x381,0x3b2,0x3e6,0x41a,0x451,0x489,0x4c3,0x4fe,0x53b,0x57a,0x5bb,0x5fd,0x641,0x687,0x6cf,0x718,0x764,0x7b1,0x800,0x851,0x8a4,0x8f8,0x94f,0x9a8,0xa02,0xa5f,0xabd,0xb1e,0xb80,0xbe5,0xc4b,0xcb4,0xd1e,0xd8b,0xdfa,0xe6b,0xedd,0xf53,0xfca,0x1043,0x10bf,0x113c,0x11bc,0x123e,0x12c3,0x1349,0x13d2,0x145d,0x14ea,0x157a,0x160c,0x16a0,0x1736,0x17cf,0x186a,0x1907,0x19a7,0x1a49,0x1aee,0x1b95,0x1c3e,0x1cea,0x1d98,0x1e48,0x1efb,0x1fb1,0x2069,0x2123,0x21e0,0x22a0,0x2362,0x2426,0x24ed,0x25b7,0x2683,0x2752,0x2823,0x28f7,0x29cd,0x2aa6,0x2b82,0x2c60,0x2d41,0x2e25,0x2f0b,0x2ff4,0x30df,0x31ce,0x32bf,0x33b3,0x34a9,0x35a2,0x369e,0x379d,0x389e,0x39a2,0x3aa9,0x3bb3,0x3cc0,0x3dcf,0x3ee1,0x3ff6,0x410e,0x4229,0x4347,0x4467,0x458b,0x46b1,0x47da,0x4906,0x4a35,0x4b67,0x4c9c,0x4dd4,0x4f0e,0x504c,0x518d,0x52d0,0x5417,0x5561,0x56ad,0x57fd,0x5950,0x5aa5,0x5bfe,0x5d5a,0x5eb9,0x601b,0x6180,0x62e8,0x6454,0x65c2,0x6733,0x68a8,0x6a20,0x6b9b,0x6d19,0x6e9a,0x701e,0x71a6,0x7331,0x74bf,0x7650,0x77e4,0x797c,0x7b17,0x7cb5,0x7e56,0x7ffb,0x81a2,0x834d,0x84fc,0x86ae,0x8863,0x8a1b,0x8bd6,0x8d95,0x8f58,0x911d,0x92e6,0x94b2,0x9682,0x9855,0x9a2b,0x9c05,0x9de2,0x9fc3,0xa1a7,0xa38e,0xa579,0xa768,0xa959,0xab4f,0xad47,0xaf43,0xb143,0xb346,0xb54d,0xb757,0xb964,0xbb75,0xbd8a,0xbfa2,0xc1be,0xc3dd,0xc600,0xc826,0xca50,0xcc7e,0xceaf,0xd0e3,0xd31c,0xd557,0xd797,0xd9da,0xdc21,0xde6b,0xe0b9,0xe30b,0xe560,0xe7b9,0xea16,0xec76,0xeedb,0xf142,0xf3ae,0xf61d,0xf890,0xfb07,0xfd81,
    0x80,0x80,0x80,0x81,0x82,0x83,0x86,0x88,0x8b,0x8f,0x94,0x99,0x9f,0xa6,0xae,0xb6,0xc0,0xca,0xd6,0xe2,0xf0,0xfe,0x10e,0x11f,0x130,0x143,0x157,0x16d,0x183,0x19b,0x1b4,0x1ce,0x1ea,0x207,0x225,0x245,0x266,0x288,0x2ac,0x2d2,0x2f8,0x321,0x34a,0x376,0x3a3,0x3d1,0x401,0x432,0x466,0x49a,0x4d1,0x509,0x543,0x57e,0x5bb,0x5fa,0x63b,0x67d,0x6c1,0x707,0x74f,0x798,0x7e4,0x831,0x880,0x8d1,0x924,0x978,0x9cf,0xa28,0xa82,0xadf,0xb3d,0xb9e,0xc00,0xc65,0xccb,0xd34,0xd9e,0xe0b,0xe7a,0xeeb,0xf5d,0xfd3,0x104a,0x10c3,0x113f,0x11bc,0x123c,0x12be,0x1343,0x13c9,0x1452,0x14dd,0x156a,0x15fa,0x168c,0x1720,0x17b6,0x184f,0x18ea,0x1987,0x1a27,0x1ac9,0x1b6e,0x1c15,0x1cbe,0x1d6a,0x1e18,0x1ec8,0x1f7b,0x2031,0x20e9,0x21a3,0x2260,0x2320,0x23e2,0x24a6,0x256d,0x2637,0x2703,0x27d2,0x28a3,0x2977,0x2a4d,0x2b26,0x2c02,0x2ce0,0x2dc1,0x2ea5,0x2f8b,0x3074,0x315f,0x324e,0x333f,0x3433,0x3529,0x3622,0x371e,0x381d,0x391e,0x3a22,0x3b29,0x3c33,0x3d40,0x3e4f,0x3f61,0x4076,0x418e,0x42a9,0x43c7,0x44e7,0x460b,0x4731,0x485a,0x4986,0x4ab5,0x4be7,0x4d1c,0x4e54,0x4f8e,0x50cc,0x520d,0x5350,0x5497,0x55e1,0x572d,0x587d,0x59d0,0x5b25,0x5c7e,0x5dda,0x5f39,0x609b,0x6200,0x6368,0x64d4,0x6642,0x67b3,0x6928,0x6aa0,0x6c1b,0x6d99,0x6f1a,0x709e,0x7226,0x73b1,0x753f,0x76d0,0x7864,0x79fc,0x7b97,0x7d35,0x7ed6,0x807b,0x8222,0x83cd,0x857c,0x872e,0x88e3,0x8a9b,0x8c56,0x8e15,0x8fd8,0x919d,0x9366,0x9532,0x9702,0x98d5,0x9aab,0x9c85,0x9e62,0xa043,0xa227,0xa40e,0xa5f9,0xa7e8,0xa9d9,0xabcf,0xadc7,0xafc3,0xb1c3,0xb3c6,0xb5cd,0xb7d7,0xb9e4,0xbbf5,0xbe0a,0xc022,0xc23e,0xc45d,0xc680,0xc8a6,0xcad0,0xccfe,0xcf2f,0xd163,0xd39c,0xd5d7,0xd817,0xda5a,0xdca1,0xdeeb,0xe139,0xe38b,0xe5e0,0xe839,0xea96,0xecf6,0xef5b,0xf1c2,0xf42e,0xf69d,0xf910,0xfb87,0xfe01,
    0x40,0x40,0x40,0x41,0x42,0x43,0x46,0x48,0x4b,0x4f,0x54,0x59,0x5f,0x66,0x6e,0x76,0x80,0x8a,0x96,0xa2,0xb0,0xbe,0xce,0xdf,0xf0,0x103,0x117,0x12d,0x143,0x15b,0x174,0x18e,0x1aa,0x1c7,0x1e5,0x205,0x226,0x248,0x26c,0x292,0x2b8,0x2e1,0x30a,0x336,0x363,0x391,0x3c1,0x3f2,0x426,0x45a,0x491,0x4c9,0x503,0x53e,0x57b,0x5ba,0x5fb,0x63d,0x681,0x6c7,0x70f,0x758,0x7a4,0x7f1,0x840,0x891,0x8e4,0x938,0x98f,0x9e8,0xa42,0xa9f,0xafd,0xb5e,0xbc0,0xc25,0xc8b,0xcf4,0xd5e,0xdcb,0xe3a,0xeab,0xf1d,0xf93,0x100a,0x1083,0x10ff,0x117c,0x11fc,0x127e,0x1303,0x1389,0x1412,0x149d,0x152a,0x15ba,0x164c,0x16e0,0x1776,0x180f,0x18aa,0x1947,0x19e7,0x1a89,0x1b2e,0x1bd5,0x1c7e,0x1d2a,0x1dd8,0x1e88,0x1f3b,0x1ff1,0x20a9,0x2163,0x2220,0x22e0,0x23a2,0x2466,0x252d,0x25f7,0x26c3,0x2792,0x2863,0x2937,0x2a0d,0x2ae6,0x2bc2,0x2ca0,0x2d81,0x2e65,0x2f4b,0x3034,0x311f,0x320e,0x32ff,0x33f3,0x34e9,0x35e2,0x36de,0x37dd,0x38de,0x39e2,0x3ae9,0x3bf3,0x3d00,0x3e0f,0x3f21,0x4036,0x414e,0x4269,0x4387,0x44a7,0x45cb,0x46f1,0x481a,0x4946,0x4a75,0x4ba7,0x4cdc,0x4e14,0x4f4e,0x508c,0x51cd,0x5310,0x5457,0x55a1,0x56ed,0x583d,0x5990,0x5ae5,0x5c3e,0x5d9a,0x5ef9,0x605b,0x61c0,0x6328,0x6494,0x6602,0x6773,0x68e8,0x6a60,0x6bdb,0x6d59,0x6eda,0x705e,0x71e6,0x7371,0x74ff,0x7690,0x7824,0x79bc,0x7b57,0x7cf5,0x7e96,0x803b,0x81e2,0x838d,0x853c,0x86ee,0x88a3,0x8a5b,0x8c16,0x8dd5,0x8f98,0x915d,0x9326,0x94f2,0x96c2,0x9895,0x9a6b,0x9c45,0x9e22,0xa003,0xa1e7,0xa3ce,0xa5b9,0xa7a8,0xa999,0xab8f,0xad87,0xaf83,0xb183,0xb386,0xb58d,0xb797,0xb9a4,0xbbb5,0xbdca,0xbfe2,0xc1fe,0xc41d,0xc640,0xc866,0xca90,0xccbe,0xceef,0xd123,0xd35c,0xd597,0xd7d7,0xda1a,0xdc61,0xdeab,0xe0f9,0xe34b,0xe5a0,0xe7f9,0xea56,0xecb6,0xef1b,0xf182,0xf3ee,0xf65d,0xf8d0,0xfb47,0xfdc1,
    0xc0,0xc0,0xc0,0xc1,0xc2,0xc3,0xc6,0xc8,0xcb,0xcf,0xd4,0xd9,0xdf,0xe6,0xee,0xf6,0x100,0x10a,0x116,0x122,0x130,0x13e,0x14e,0x15f,0x170,0x183,0x197,0x1ad,0x1c3,0x1db,0x1f4,0x20e,0x22a,0x247,0x265,0x285,0x2a6,0x2c8,0x2ec,0x312,0x338,0x361,0x38a,0x3b6,0x3e3,0x411,0x441,0x472,0x4a6,0x4da,0x511,0x549,0x583,0x5be,0x5fb,0x63a,0x67b,0x6bd,0x701,0x747,0x78f,0x7d8,0x824,0x871,0x8c0,0x911,0x964,0x9b8,0xa0f,0xa68,0xac2,0xb1f,0xb7d,0xbde,0xc40,0xca5,0xd0b,0xd74,0xdde,0xe4b,0xeba,0xf2b,0xf9d,0x1013,0x108a,0x1103,0x117f,0x11fc,0x127c,0x12fe,0x1383,0x1409,0x1492,0x151d,0x15aa,0x163a,0x16cc,0x1760,0x17f6,0x188f,0x192a,0x19c7,0x1a67,0x1b09,0x1bae,0x1c55,0x1cfe,0x1daa,0x1e58,0x1f08,0x1fbb,0x2071,0x2129,0x21e3,0x22a0,0x2360,0x2422,0x24e6,0x25ad,0x2677,0x2743,0x2812,0x28e3,0x29b7,0x2a8d,0x2b66,0x2c42,0x2d20,0x2e01,0x2ee5,0x2fcb,0x30b4,0x319f,0x328e,0x337f,0x3473,0x3569,0x3662,0x375e,0x385d,0x395e,0x3a62,0x3b69,0x3c73,0x3d80,0x3e8f,0x3fa1,0x40b6,0x41ce,0x42e9,0x4407,0x4527,0x464b,0x4771,0x489a,0x49c6,0x4af5,0x4c27,0x4d5c,0x4e94,0x4fce,0x510c,0x524d,0x5390,0x54d7,0x5621,0x576d,0x58bd,0x5a10,0x5b65,0x5cbe,0x5e1a,0x5f79,0x60db,0x6240,0x63a8,0x6514,0x6682,0x67f3,0x6968,0x6ae0,0x6c5b,0x6dd9,0x6f5a,0x70de,0x7266,0x73f1,0x757f,0x7710,0x78a4,0x7a3c,0x7bd7,0x7d75,0x7f16,0x80bb,0x8262,0x840d,0x85bc,0x876e,0x8923,0x8adb,0x8c96,0x8e55,0x9018,0x91dd,0x93a6,0x9572,0x9742,0x9915,0x9aeb,0x9cc5,0x9ea2,0xa083,0xa267,0xa44e,0xa639,0xa828,0xaa19,0xac0f,0xae07,0xb003,0xb203,0xb406,0xb60d,0xb817,0xba24,0xbc35,0xbe4a,0xc062,0xc27e,0xc49d,0xc6c0,0xc8e6,0xcb10,0xcd3e,0xcf6f,0xd1a3,0xd3dc,0xd617,0xd857,0xda9a,0xdce1,0xdf2b,0xe179,0xe3cb,0xe620,0xe879,0xead6,0xed36,0xef9b,0xf202,0xf46e,0xf6dd,0xf950,0xfbc7,0xfe41,
    0x20,0x20,0x20,0x21,0x22,0x23,0x26,0x28,0x2b,0x2f,0x34,0x39,0x3f,0x46,0x4e,0x56,0x60,0x6a,0x76,0x82,0x90,0x9e,0xae,0xbf,0xd0,0xe3,0xf7,0x10d,0x123,0x13b,0x154,0x16e,0x18a,0x1a7,0x1c5,0x1e5,0x206,0x228,0x24c,0x272,0x298,0x2c1,0x2ea,0x316,0x343,0x371,0x3a1,0x3d2,0x406,0x43a,0x471,0x4a9,0x4e3,0x51e,0x55b,0x59a,0x5db,0x61d,0x661,0x6a7,0x6ef,0x738,0x784,0x7d1,0x820,0x871,0x8c4,0x918,0x96f,0x9c8,0xa22,0xa7f,0xadd,0xb3e,0xba0,0xc05,0xc6b,0xcd4,0xd3e,0xdab,0xe1a,0xe8b,0xefd,0xf73,0xfea,0x1063,0x10df,0x115c,0x11dc,0x125e,0x12e3,0x1369,0x13f2,0x147d,0x150a,0x159a,0x162c,0x16c0,0x1756,0x17ef,0x188a,0x1927,0x19c7,0x1a69,0x1b0e,0x1bb5,0x1c5e,0x1d0a,0x1db8,0x1e68,0x1f1b,0x1fd1,0x2089,0x2143,0x2200,0x22c0,0x2382,0x2446,0x250d,0x25d7,0x26a3,0x2772,0x2843,0x2917,0x29ed,0x2ac6,0x2ba2,0x2c80,0x2d61,0x2e45,0x2f2b,0x3014,0x30ff,0x31ee,0x32df,0x33d3,0x34c9,0x35c2,0x36be,0x37bd,0x38be,0x39c2,0x3ac9,0x3bd3,0x3ce0,0x3def,0x3f01,0x4016,0x412e,0x4249,0x4367,0x4487,0x45ab,0x46d1,0x47fa,0x4926,0x4a55,0x4b87,0x4cbc,0x4df4,0x4f2e,0x506c,0x51ad,0x52f0,0x5437,0x5581,0x56cd,0x581d,0x5970,0x5ac5,0x5c1e,0x5d7a,0x5ed9,0x603b,0x61a0,0x6308,0x6474,0x65e2,0x6753,0x68c8,0x6a40,0x6bbb,0x6d39,0x6eba,0x703e,0x71c6,0x7351,0x74df,0x7670,0x7804,0x799c,0x7b37,0x7cd5,0x7e76,0x801b,0x81c2,0x836d,0x851c,0x86ce,0x8883,0x8a3b,0x8bf6,0x8db5,0x8f78,0x913d,0x9306,0x94d2,0x96a2,0x9875,0x9a4b,0x9c25,0x9e02,0x9fe3,0xa1c7,0xa3ae,0xa599,0xa788,0xa979,0xab6f,0xad67,0xaf63,0xb163,0xb366,0xb56d,0xb777,0xb984,0xbb95,0xbdaa,0xbfc2,0xc1de,0xc3fd,0xc620,0xc846,0xca70,0xcc9e,0xcecf,0xd103,0xd33c,0xd577,0xd7b7,0xd9fa,0xdc41,0xde8b,0xe0d9,0xe32b,0xe580,0xe7d9,0xea36,0xec96,0xeefb,0xf162,0xf3ce,0xf63d,0xf8b0,0xfb27,0xfda1,
    0xa0,0xa0,0xa0,0xa1,0xa2,0xa3,0xa6,0xa8,0xab,0xaf,0xb4,0xb9,0xbf,0xc6,0xce,0xd6,0xe0,0xea,0xf6,0x102,0x110,0x11e,0x12e,0x13f,0x150,0x163,0x177,0x18d,0x1a3,0x1bb,0x1d4,0x1ee,0x20a,0x227,0x245,0x265,0x286,0x2a8,0x2cc,0x2f2,0x318,0x341,0x36a,0x396,0x3c3,0x3f1,0x421,0x452,0x486,0x4ba,0x4f1,0x529,0x563,0x59e,0x5db,0x61a,0x65b,0x69d,0x6e1,0x727,0x76f,0x7b8,0x804,0x851,0x8a0,0x8f1,0x944,0x998,0x9ef,0xa48,0xaa2,0xaff,0xb5d,0xbbe,0xc20,0xc85,0xceb,0xd54,0xdbe,0xe2b,0xe9a,0xf0b,0xf7d,0xff3,0x106a,0x10e3,0x115f,0x11dc,0x125c,0x12de,0x1363,0x13e9,0x1472,0x14fd,0x158a,0x161a,0x16ac,0x1740,0x17d6,0x186f,0x190a,0x19a7,0x1a47,0x1ae9,0x1b8e,0x1c35,0x1cde,0x1d8a,0x1e38,0x1ee8,0x1f9b,0x2051,0x2109,0x21c3,0x2280,0x2340,0x2402,0x24c6,0x258d,0x2657,0x2723,0x27f2,0x28c3,0x2997,0x2a6d,0x2b46,0x2c22,0x2d00,0x2de1,0x2ec5,0x2fab,0x3094,0x317f,0x326e,0x335f,0x3453,0x3549,0x3642,0x373e,0x383d,0x393e,0x3a42,0x3b49,0x3c53,0x3d60,0x3e6f,0x3f81,0x4096,0x41ae,0x42c9,0x43e7,0x4507,0x462b,0x4751,0x487a,0x49a6,0x4ad5,0x4c07,0x4d3c,0x4e74,0x4fae,0x50ec,0x522d,0x5370,0x54b7,0x5601,0x574d,0x589d,0x59f0,0x5b45,0x5c9e,0x5dfa,0x5f59,0x60bb,0x6220,0x6388,0x64f4,0x6662,0x67d3,0x6948,0x6ac0,0x6c3b,0x6db9,0x6f3a,0x70be,0x7246,0x73d1,0x755f,0x76f0,0x7884,0x7a1c,0x7bb7,0x7d55,0x7ef6,0x809b,0x8242,0x83ed,0x859c,0x874e,0x8903,0x8abb,0x8c76,0x8e35,0x8ff8,0x91bd,0x9386,0x9552,0x9722,0x98f5,0x9acb,0x9ca5,0x9e82,0xa063,0xa247,0xa42e,0xa619,0xa808,0xa9f9,0xabef,0xade7,0xafe3,0xb1e3,0xb3e6,0xb5ed,0xb7f7,0xba04,0xbc15,0xbe2a,0xc042,0xc25e,0xc47d,0xc6a0,0xc8c6,0xcaf0,0xcd1e,0xcf4f,0xd183,0xd3bc,0xd5f7,0xd837,0xda7a,0xdcc1,0xdf0b,0xe159,0xe3ab,0xe600,0xe859,0xeab6,0xed16,0xef7b,0xf1e2,0xf44e,0xf6bd,0xf930,0xfba7,0xfe21,
    0x60,0x60,0x60,0x61,0x62,0x63,0x66,0x68,0x6b,0x6f,0x74,0x79,0x7f,0x86,0x8e,0x96,0xa0,0xaa,0xb6,0xc2,0xd0,0xde,0xee,0xff,0x110,0x123,0x137,0x14d,0x163,0x17b,0x194,0x1ae,0x1ca,0x1e7,0x205,0x225,0x246,0x268,0x28c,0x2b2,0x2d8,0x301,0x32a,0x356,0x383,0x3b1,0x3e1,0x412,0x446,0x47a,0x4b1,0x4e9,0x523,0x55e,0x59b,0x5da,0x61b,0x65d,0x6a1,0x6e7,0x72f,0x778,0x7c4,0x811,0x860,0x8b1,0x904,0x958,0x9af,0xa08,0xa62,0xabf,0xb1d,0xb7e,0xbe0,0xc45,0xcab,0xd14,0xd7e,0xdeb,0xe5a,0xecb,0xf3d,0xfb3,0x102a,0x10a3,0x111f,0x119c,0x121c,0x129e,0x1323,0x13a9,0x1432,0x14bd,0x154a,0x15da,0x166c,0x1700,0x1796,0x182f,0x18ca,0x1967,0x1a07,0x1aa9,0x1b4e,0x1bf5,0x1c9e,0x1d4a,0x1df8,0x1ea8,0x1f5b,0x2011,0x20c9,0x2183,0x2240,0x2300,0x23c2,0x2486,0x254d,0x2617,0x26e3,0x27b2,0x2883,0x2957,0x2a2d,0x2b06,0x2be2,0x2cc0,0x2da1,0x2e85,0x2f6b,0x3054,0x313f,0x322e,0x331f,0x3413,0x3509,0x3602,0x36fe,0x37fd,0x38fe,0x3a02,0x3b09,0x3c13,0x3d20,0x3e2f,0x3f41,0x4056,0x416e,0x4289,0x43a7,0x44c7,0x45eb,0x4711,0x483a,0x4966,0x4a95,0x4bc7,0x4cfc,0x4e34,0x4f6e,0x50ac,0x51ed,0x5330,0x5477,0x55c1,0x570d,0x585d,0x59b0,0x5b05,0x5c5e,0x5dba,0x5f19,0x607b,0x61e0,0x6348,0x64b4,0x6622,0x6793,0x6908,0x6a80,0x6bfb,0x6d79,0x6efa,0x707e,0x7206,0x7391,0x751f,0x76b0,0x7844,0x79dc,0x7b77,0x7d15,0x7eb6,0x805b,0x8202,0x83ad,0x855c,0x870e,0x88c3,0x8a7b,0x8c36,0x8df5,0x8fb8,0x917d,0x9346,0x9512,0x96e2,0x98b5,0x9a8b,0x9c65,0x9e42,0xa023,0xa207,0xa3ee,0xa5d9,0xa7c8,0xa9b9,0xabaf,0xada7,0xafa3,0xb1a3,0xb3a6,0xb5ad,0xb7b7,0xb9c4,0xbbd5,0xbdea,0xc002,0xc21e,0xc43d,0xc660,0xc886,0xcab0,0xccde,0xcf0f,0xd143,0xd37c,0xd5b7,0xd7f7,0xda3a,0xdc81,0xdecb,0xe119,0xe36b,0xe5c0,0xe819,0xea76,0xecd6,0xef3b,0xf1a2,0xf40e,0xf67d,0xf8f0,0xfb67,0xfde1,
    0xe0,0xe0,0xe0,0xe1,0xe2,0xe3,0xe6,0xe8,0xeb,0xef,0xf4,0xf9,0xff,0x106,0x10e,0x116,0x120,0x12a,0x136,0x142,0x150,0x15e,0x16e,0x17f,0x190,0x1a3,0x1b7,0x1cd,0x1e3,0x1fb,0x214,0x22e,0x24a,0x267,0x285,0x2a5,0x2c6,0x2e8,0x30c,0x332,0x358,0x381,0x3aa,0x3d6,0x403,0x431,0x461,0x492,0x4c6,0x4fa,0x531,0x569,0x5a3,0x5de,0x61b,0x65a,0x69b,0x6dd,0x721,0x767,0x7af,0x7f8,0x844,0x891,0x8e0,0x931,0x984,0x9d8,0xa2f,0xa88,0xae2,0xb3f,0xb9d,0xbfe,0xc60,0xcc5,0xd2b,0xd94,0xdfe,0xe6b,0xeda,0xf4b,0xfbd,0x1033,0x10aa,0x1123,0x119f,0x121c,0x129c,0x131e,0x13a3,0x1429,0x14b2,0x153d,0x15ca,0x165a,0x16ec,0x1780,0x1816,0x18af,0x194a,0x19e7,0x1a87,0x1b29,0x1bce,0x1c75,0x1d1e,0x1dca,0x1e78,0x1f28,0x1fdb,0x2091,0x2149,0x2203,0x22c0,0x2380,0x2442,0x2506,0x25cd,0x2697,0x2763,0x2832,0x2903,0x29d7,0x2aad,0x2b86,0x2c62,0x2d40,0x2e21,0x2f05,0x2feb,0x30d4,0x31bf,0x32ae,0x339f,0x3493,0x3589,0x3682,0x377e,0x387d,0x397e,0x3a82,0x3b89,0x3c93,0x3da0,0x3eaf,0x3fc1,0x40d6,0x41ee,0x4309,0x4427,0x4547,0x466b,0x4791,0x48ba,0x49e6,0x4b15,0x4c47,0x4d7c,0x4eb4,0x4fee,0x512c,0x526d,0x53b0,0x54f7,0x5641,0x578d,0x58dd,0x5a30,0x5b85,0x5cde,0x5e3a,0x5f99,0x60fb,0x6260,0x63c8,0x6534,0x66a2,0x6813,0x6988,0x6b00,0x6c7b,0x6df9,0x6f7a,0x70fe,0x7286,0x7411,0x759f,0x7730,0x78c4,0x7a5c,0x7bf7,0x7d95,0x7f36,0x80db,0x8282,0x842d,0x85dc,0x878e,0x8943,0x8afb,0x8cb6,0x8e75,0x9038,0x91fd,0x93c6,0x9592,0x9762,0x9935,0x9b0b,0x9ce5,0x9ec2,0xa0a3,0xa287,0xa46e,0xa659,0xa848,0xaa39,0xac2f,0xae27,0xb023,0xb223,0xb426,0xb62d,0xb837,0xba44,0xbc55,0xbe6a,0xc082,0xc29e,0xc4bd,0xc6e0,0xc906,0xcb30,0xcd5e,0xcf8f,0xd1c3,0xd3fc,0xd637,0xd877,0xdaba,0xdd01,0xdf4b,0xe199,0xe3eb,0xe640,0xe899,0xeaf6,0xed56,0xefbb,0xf222,0xf48e,0xf6fd,0xf970,0xfbe7,0xfe61
};
// adafruit matrix library
static const uint8_t lightPowerMap4bit[256] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x05, 0x05,
    0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
    0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x06, 0x06,
    0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
    0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09,
    0x09, 0x09, 0x09, 0x09, 0x09, 0x0a, 0x0a, 0x0a,
    0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0b, 0x0b,
    0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0c, 0x0c,
    0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0d, 0x0d,
    0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0e, 0x0e, 0x0e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0f, 0x0f, 0x0f, 0x0f
};

void calculateBackgroundLUT(color_chan_t * lut, uint8_t backgroundBrightness) {
    // update background table
    for(int i=0; i<256; i++) {
//#if COLOR_DEPTH_RGB > 24
        lut[i] = (lightPowerMap16bit[i] * backgroundBrightness) / 256;
//#else
//        lut[i] = (lightPowerMap8bit[i] * backgroundBrightness) / 256;
//#endif
    }
}



color_chan_t colorCorrection(uint8_t inputcolor) {
    static int ditherCycle = 0;
    int ditherFrame;

    switch (ccmode) {
    case cc24:
        return Chan8ToColor(lightPowerMap8bit[inputcolor] );

    case cc12:
        return Chan8ToColor(lightPowerMap4bit[inputcolor] << 4 );

    case cc48:
        return lightPowerMap16bit[inputcolor];

    case cc48dither:
        ditherFrame = ditherCycle++ & ((1<<DITHER_BITS)-1);
        return lightPowerMap16bitDithering[(ditherFrame<<8) + inputcolor];

    case ccNone:
    default:
        return Chan8ToColor(inputcolor);
    }
}
