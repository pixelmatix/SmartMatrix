/*
 * SmartMatrix Library - Common Definitions
 *
 * Copyright (c) 2020 Louis Beaudoin (Pixelmatix)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#ifndef _MATRIX_COMMON_H_
#define _MATRIX_COMMON_H_

#include <stdint.h>

#ifdef ARDUINO_ARCH_AVR
#include "Arduino.h"
#endif

#if defined(__IMXRT1062__) // For Teensy 4.0/4.1, use PROGMEM to put LUT arrays into flash
  #define PROGMEM __attribute__((section(".progmem"))) // from <avr/pgmspace.h>
#else
  #if !defined(PROGMEM)
    #define PROGMEM
  #endif
#endif

// struct definitions for rgb24 and rgb48 with assignment operators
// between them; adding rgb36 didn't seem to make sense because even when
// packed with bitfields, it would only save 1 byte over rgb48.
typedef bool rgb1;
struct rgb8;
struct rgb16;
struct rgb24;
struct rgb48;

const uint8_t cs_scale2to5[] = {
  0, 10, 20, 31
};
const uint8_t cs_scale2to8[] = {
  0, 85, 170, 255
};
const uint8_t cs_scale3to5[] = {
  0, 4, 8, 13, 17, 22, 26, 31
};
const uint8_t cs_scale3to6[] = {
  0, 9, 18, 27, 36, 45, 54, 63
};
const uint8_t cs_scale3to8[] = {
  0, 36, 72, 109, 145, 182, 218, 255
};
const uint8_t cs_scale5to8[] = {
  0, 8, 16, 24, 32, 41, 49, 57, 65, 74, 82, 90, 98, 106, 115, 123, 131, 139, 148,
  156, 164, 172, 180, 189, 197, 205, 213, 222, 230, 238, 246, 255
};
const uint8_t cs_scale6to8[] = {
  0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80,
  85, 89, 93, 97, 101, 105, 109, 113, 117, 121, 125, 129, 133, 137, 141, 145, 149,
  153, 157, 161, 165, 170, 174, 178, 182, 186, 190, 194, 198, 202, 206, 210, 214,
  218, 222, 226, 230, 234, 238, 242, 246, 250, 255
};
const uint16_t cs_scale2to16[] = {
  0, 21845, 43690, 65535
};
const uint16_t cs_scale3to16[] = {
  0, 9362, 18724, 28086, 37448, 46810, 56172, 65535
};
const uint16_t cs_scale5to16[] = {
  0, 2114, 4228, 6342, 8456, 10570, 12684, 14798, 16912, 19026, 21140, 23254, 25368,
  27482, 29596, 31710, 33824, 35938, 38052, 40166, 42280, 44394, 46508, 48622, 50736,
  52850, 54964, 57078, 59192, 61306, 63420, 65535
};
const uint16_t cs_scale6to16[] = {
  0, 1040, 2080, 3120, 4160, 5201, 6241, 7281, 8321, 9362, 10402, 11442, 12482, 13523,
  14563, 15603, 16643, 17684, 18724, 19764, 20804, 21845, 22885, 23925, 24965, 26005, 27046,
  28086, 29126, 30166, 31207, 32247, 33287, 34327, 35368, 36408, 37448, 38488, 39529, 40569,
  41609, 42649, 43690, 44730, 45770, 46810, 47850, 48891, 49931, 50971, 52011, 53052, 54092,
  55132, 56172, 57213, 58253, 59293, 60333, 61374, 62414, 63454, 64494, 65535
};
typedef struct rgb8 {  // RGB332
    rgb8() : rgb8(0,0,0) {}
    rgb8(float r, float g, float b, float t) { red = r * 7.0; green = g * 7.0; blue = b * 3.0; }
    rgb8(uint8_t r, uint8_t g, uint8_t b) {
        red = r; green = g; blue = b;
    }
    rgb8& operator=(const rgb8& col);
    rgb8& operator=(const rgb16& col);
    rgb8& operator=(const rgb24& col);
    rgb8& operator=(const rgb48& col);
    rgb8( const rgb16& col );
    rgb8( const rgb24& col );
    rgb8( const rgb48& col );
    union {
      struct {
        uint8_t blue  :2;
        uint8_t green :3;
        uint8_t red   :3;
      };
      uint8_t rgb;
    };
} rgb8;
typedef struct rgb16 { // RGB565
    rgb16() : rgb16(0,0,0) {}
    rgb16(float r, float g, float b, float t) { red = r * 31.0; green = g * 63.0; blue = b * 31.0; }
    rgb16(uint8_t r, uint8_t g, uint8_t b) {
        red = r; green = g; blue = b;
    }
    rgb16& operator=(const rgb8& col);
    rgb16& operator=(const rgb16& col);
    rgb16& operator=(const rgb24& col);
    rgb16& operator=(const rgb48& col);
    rgb16& operator=(const uint16_t& col);
    rgb16( const rgb8& col );
    rgb16( const rgb24& col );
    rgb16( const rgb48& col );
    rgb16( const uint16_t& col );
    union {
      struct {
        uint16_t blue  :5;
        uint16_t green :6;
        uint16_t red   :5;
      };
      uint16_t rgb;
    };
} rgb16;
typedef struct rgb24 {
    rgb24() : rgb24(0,0,0) {}
    rgb24(float r, float g, float b, float t) { red = r * 255.0; green = g * 255.0; blue = b * 255.0; }
    rgb24(uint8_t r, uint8_t g, uint8_t b) {
        red = r; green = g; blue = b;
    }
    rgb24& operator=(const rgb8& col);
    rgb24& operator=(const rgb16& col);
    rgb24& operator=(const rgb24& col);
    rgb24& operator=(const rgb48& col);
    rgb24( const rgb8& col);
    rgb24( const rgb16& col);
    rgb24( const rgb24& col);
    rgb24( const rgb48& col);

    uint8_t red;
    uint8_t green;
    uint8_t blue;
} rgb24;

typedef struct rgb48 {
    rgb48() : rgb48(0,0,0) {}
    rgb48(float r, float g, float b, float t) {
        red = (uint16_t)(r * 65535.0); green = (uint16_t)(g * 65535.0); blue = (uint16_t)(b * 65535.0);
    }
    rgb48(uint16_t r, uint16_t g, uint16_t b) {
        red = r; green = g; blue = b;
    }
    rgb48& operator=(const rgb8& col);
    rgb48& operator=(const rgb16& col);
    rgb48& operator=(const rgb24& col);
    rgb48( const rgb8& col);
    rgb48( const rgb16& col);
    rgb48( const rgb24& col);
    rgb48( const rgb48& col);

    uint16_t red;
    uint16_t green;
    uint16_t blue;
} rgb48;

// todo: why is this assignment operator needed?  Implicitly defined assignment operator causes crashes when drawing to last pixel of last buffer of background bitmap (because it's a multiple of 3x bytes, not 2x like rgb48?)
inline rgb8& rgb8::operator=(const rgb8& col) {
    rgb = col.rgb;
    return *this;
}
inline rgb8& rgb8::operator=(const rgb16& col) {
    red   = col.red   >> 2;    /* 5 -> 3 */
    green = col.green >> 3;    /* 6 -> 3 */
    blue  = col.blue  >> 3;    /* 5 -> 2 */
    return *this;
}
inline rgb8& rgb8::operator=(const rgb24& col) {
    red   = col.red   >> 5;    /* 8 -> 3 */
    green = col.green >> 5;    /* 8 -> 3 */
    blue  = col.blue  >> 6;    /* 8 -> 2 */
    return *this;
}
inline rgb8& rgb8::operator=(const rgb48& col) {
    red   = col.red   >> 13;   /* 16 -> 3 */
    green = col.green >> 13;   /* 16 -> 3 */
    blue  = col.blue  >> 14;   /* 16 -> 2 */
    return *this;
}
inline rgb8::rgb8(const rgb16& col) {
    red   = col.red   >> 2;    /* 5 -> 3 */
    green = col.green >> 3;    /* 6 -> 3 */
    blue  = col.blue  >> 3;    /* 5 -> 2 */
}
inline rgb8::rgb8(const rgb24& col) {
    red   = col.red   >> 5;    /* 8 -> 3 */
    green = col.green >> 5;    /* 8 -> 3 */
    blue  = col.blue  >> 6;    /* 8 -> 2 */
}
inline rgb8::rgb8(const rgb48& col) {
    red   = col.red   >> 13;   /* 16 -> 3 */
    green = col.green >> 13;   /* 16 -> 3 */
    blue  = col.blue  >> 14;   /* 16 -> 2 */
}
inline rgb16& rgb16::operator=(const rgb8& col) {
    red =   cs_scale3to5[col.red];      // 3 -> 5
    green = cs_scale3to6[col.green];    // 3 -> 6
    blue =  cs_scale2to5[col.blue];     // 2 -> 5
    return *this;
}
inline rgb16& rgb16::operator=(const rgb16& col) {
    rgb = col.rgb;
    return *this;
}
inline rgb16& rgb16::operator=(const rgb24& col) {
    red = col.red >> 3;      // 8 -> 5
    green = col.green >> 2;  // 8 -> 6
    blue = col.blue >> 3;    // 8 -> 5
    return *this;
}
inline rgb16& rgb16::operator=(const rgb48& col) {
    red = col.red >> 11;     // 16 -> 5
    green = col.green >> 10; // 16 -> 6
    blue = col.blue >> 11;   // 16 -> 5
    return *this;
}
// Adafruit_GFX (uint16_t == rgb16) conversion
inline rgb16& rgb16::operator=(const uint16_t& col) {
    rgb = col;
    return *this;
}
inline rgb16::rgb16(const rgb8& col) {
    red =   cs_scale3to5[col.red];      // 3 -> 5
    green = cs_scale3to6[col.green];    // 3 -> 6
    blue =  cs_scale2to5[col.blue];     // 2 -> 5
}
inline rgb16::rgb16(const rgb24& col) {
    red = col.red >> 3;      // 8 -> 5
    green = col.green >> 2;  // 8 -> 6
    blue = col.blue >> 3;    // 8 -> 5
}
inline rgb16::rgb16(const rgb48& col) {
    red = col.red >> 11;     // 16 -> 5
    green = col.green >> 10; // 16 -> 6
    blue = col.blue >> 11;   // 16 -> 5
}
// Adafruit_GFX (uint16_t == rgb16) conversion
inline rgb16::rgb16(const uint16_t& col) {
    rgb = col;
}
inline rgb24& rgb24::operator=(const rgb8& col) {
    red =   cs_scale3to8[col.red];      // 3 -> 8
    green = cs_scale3to8[col.green];    // 3 -> 8
    blue =  cs_scale2to8[col.blue];     // 2 -> 8
    return *this;
}
inline rgb24& rgb24::operator=(const rgb16& col) {
    red =   cs_scale5to8[col.red];      // 5 -> 8
    green = cs_scale6to8[col.green];    // 6 -> 8
    blue =  cs_scale5to8[col.blue];     // 5 -> 8
    return *this;
}
inline rgb24& rgb24::operator=(const rgb24& col) {
    red = col.red;
    green = col.green;
    blue = col.blue;
    return *this;
}

inline rgb24& rgb24::operator=(const rgb48& col) {
    red = col.red >> 8;
    green = col.green >> 8;
    blue = col.blue >> 8;
    return *this;
}
inline rgb24::rgb24(const rgb8& col) {
    red =   cs_scale3to8[col.red];      // 3 -> 8
    green = cs_scale3to8[col.green];    // 3 -> 8
    blue =  cs_scale2to8[col.blue];     // 2 -> 8
}
inline rgb24::rgb24(const rgb16& col) {
    red =   cs_scale5to8[col.red];      // 5 -> 8
    green = cs_scale6to8[col.green];    // 6 -> 8
    blue =  cs_scale5to8[col.blue];     // 5 -> 8
}
inline rgb24::rgb24(const rgb24& col) {
    red = col.red;
    green = col.green;
    blue = col.blue;
}
inline rgb24::rgb24(const rgb48& col) {
    red = col.red >> 8;
    green = col.green >> 8;
    blue = col.blue >> 8;
}
inline rgb48& rgb48::operator=(const rgb8& col) {
    red =   cs_scale3to16[col.red];     // 3 -> 16
    green = cs_scale3to16[col.green];   // 3 -> 16
    blue =  cs_scale2to16[col.blue];    // 2 -> 16
    return *this;
}
inline rgb48& rgb48::operator=(const rgb16& col) {
    red =   cs_scale5to16[col.red];     // 5 -> 16
    green = cs_scale6to16[col.green];   // 6 -> 16
    blue =  cs_scale5to16[col.blue];    // 5 -> 16
    return *this;
}
/* cheap trick to extend destination range from
 * [0x000000000000 .. 0xFF00FF00FF00] to [0x000000000000 .. 0xFFFFFFFFFFFF]
 * and maintain some level of accuracy:
 * write source colour to higher AND lower part of destination uint16_t:
 * 0x000000 stays 0x000000000000, but 0xFFFFFF will correctly be 0xFFFFFFFFFFFF
 */
inline rgb48& rgb48::operator=(const rgb24& col) {
    red = (col.red << 8) | col.red;
    green = (col.green << 8)  | col.green;
    blue = (col.blue << 8) | col.blue;
    return *this;
}
inline rgb48::rgb48(const rgb8& col) {
    red =   cs_scale3to16[col.red];     // 3 -> 16
    green = cs_scale3to16[col.green];   // 3 -> 16
    blue =  cs_scale2to16[col.blue];    // 2 -> 16
}
inline rgb48::rgb48(const rgb16& col) {
    red =   cs_scale5to16[col.red];     // 5 -> 16
    green = cs_scale6to16[col.green];   // 6 -> 16
    blue =  cs_scale5to16[col.blue];    // 5 -> 16
}

inline rgb48::rgb48(const rgb24& col) {
    red = (col.red << 8) | col.red;
    green = (col.green << 8)  | col.green;
    blue = (col.blue << 8) | col.blue;
}
inline rgb48::rgb48(const rgb48& col) {
    red = col.red;
    green = col.green;
    blue = col.blue;
}

#define NAME2(fun,suffix) fun ## suffix
#define NAME1(fun,suffix) NAME2(fun,suffix)
#define RGB_TYPE(depth) NAME1(rgb,depth)

#define Chan8ToColor( c ) ((c) << 8)

#define color_chan_t uint16_t

// source - somewhere on the internet (arduino forum?)
static const PROGMEM uint8_t lightPowerMap8bit[256] = {
    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
    4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6,
    7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10, 11,
    11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 15, 15, 15, 16, 16, 17,
    17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24,
    25, 25, 26, 26, 27, 28, 28, 29, 29, 30, 31, 31, 32, 32, 33, 34,
    34, 35, 36, 37, 37, 38, 39, 39, 40, 41, 42, 43, 43, 44, 45, 46,
    47, 47, 48, 49, 50, 51, 52, 53, 54, 54, 55, 56, 57, 58, 59, 60,
    61, 62, 63, 64, 65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 77,
    79, 80, 81, 82, 83, 85, 86, 87, 88, 90, 91, 92, 94, 95, 96, 98,
    99, 100, 102, 103, 105, 106, 108, 109, 110, 112, 113, 115, 116, 118, 120, 121,
    123, 124, 126, 128, 129, 131, 132, 134, 136, 138, 139, 141, 143, 145, 146, 148,
    150, 152, 154, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179,
    181, 183, 185, 187, 189, 191, 193, 196, 198, 200, 202, 204, 207, 209, 211, 214,
    216, 218, 220, 223, 225, 228, 230, 232, 235, 237, 240, 242, 245, 247, 250, 252
};


// generated by adafruit utility included with matrix library
// https://github.com/adafruit/RGB-matrix-Panel/blob/master/extras/gamma.c
// options: planes = 16 and GAMMA = 2.5
static const PROGMEM uint16_t lightPowerMap16bit[] = {
    0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x06, 0x08,
    0x0b, 0x0f, 0x14, 0x19, 0x1f, 0x26, 0x2e, 0x37,
    0x41, 0x4b, 0x57, 0x63, 0x71, 0x80, 0x8f, 0xa0,
    0xb2, 0xc5, 0xda, 0xef, 0x106, 0x11e, 0x137, 0x152,
    0x16e, 0x18b, 0x1a9, 0x1c9, 0x1eb, 0x20e, 0x232, 0x257,
    0x27f, 0x2a7, 0x2d2, 0x2fd, 0x32b, 0x359, 0x38a, 0x3bc,
    0x3ef, 0x425, 0x45c, 0x494, 0x4cf, 0x50b, 0x548, 0x588,
    0x5c9, 0x60c, 0x651, 0x698, 0x6e0, 0x72a, 0x776, 0x7c4,
    0x814, 0x866, 0x8b9, 0x90f, 0x967, 0x9c0, 0xa1b, 0xa79,
    0xad8, 0xb3a, 0xb9d, 0xc03, 0xc6a, 0xcd4, 0xd3f, 0xdad,
    0xe1d, 0xe8f, 0xf03, 0xf79, 0xff2, 0x106c, 0x10e9, 0x1168,
    0x11e9, 0x126c, 0x12f2, 0x137a, 0x1404, 0x1490, 0x151f, 0x15b0,
    0x1643, 0x16d9, 0x1771, 0x180b, 0x18a7, 0x1946, 0x19e8, 0x1a8b,
    0x1b32, 0x1bda, 0x1c85, 0x1d33, 0x1de2, 0x1e95, 0x1f49, 0x2001,
    0x20bb, 0x2177, 0x2236, 0x22f7, 0x23bb, 0x2481, 0x254a, 0x2616,
    0x26e4, 0x27b5, 0x2888, 0x295e, 0x2a36, 0x2b11, 0x2bef, 0x2cd0,
    0x2db3, 0x2e99, 0x2f81, 0x306d, 0x315a, 0x324b, 0x333f, 0x3435,
    0x352e, 0x3629, 0x3728, 0x3829, 0x392d, 0x3a33, 0x3b3d, 0x3c49,
    0x3d59, 0x3e6b, 0x3f80, 0x4097, 0x41b2, 0x42d0, 0x43f0, 0x4513,
    0x463a, 0x4763, 0x488f, 0x49be, 0x4af0, 0x4c25, 0x4d5d, 0x4e97,
    0x4fd5, 0x5116, 0x525a, 0x53a1, 0x54eb, 0x5638, 0x5787, 0x58da,
    0x5a31, 0x5b8a, 0x5ce6, 0x5e45, 0x5fa7, 0x610d, 0x6276, 0x63e1,
    0x6550, 0x66c2, 0x6837, 0x69af, 0x6b2b, 0x6caa, 0x6e2b, 0x6fb0,
    0x7139, 0x72c4, 0x7453, 0x75e5, 0x777a, 0x7912, 0x7aae, 0x7c4c,
    0x7def, 0x7f94, 0x813d, 0x82e9, 0x8498, 0x864b, 0x8801, 0x89ba,
    0x8b76, 0x8d36, 0x8efa, 0x90c0, 0x928a, 0x9458, 0x9629, 0x97fd,
    0x99d4, 0x9bb0, 0x9d8e, 0x9f70, 0xa155, 0xa33e, 0xa52a, 0xa71a,
    0xa90d, 0xab04, 0xacfe, 0xaefb, 0xb0fc, 0xb301, 0xb509, 0xb715,
    0xb924, 0xbb37, 0xbd4d, 0xbf67, 0xc184, 0xc3a5, 0xc5ca, 0xc7f2,
    0xca1e, 0xcc4d, 0xce80, 0xd0b7, 0xd2f1, 0xd52f, 0xd771, 0xd9b6,
    0xdbfe, 0xde4b, 0xe09b, 0xe2ef, 0xe547, 0xe7a2, 0xea01, 0xec63,
    0xeeca, 0xf134, 0xf3a2, 0xf613, 0xf888, 0xfb02, 0xfd7e, 0xffff
};

// adafruit matrix library
static const PROGMEM uint8_t lightPowerMap4bit[256] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
    0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
    0x02, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
    0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
    0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x05, 0x05,
    0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
    0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x06, 0x06,
    0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07,
    0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
    0x07, 0x07, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
    0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x09, 0x09,
    0x09, 0x09, 0x09, 0x09, 0x09, 0x0a, 0x0a, 0x0a,
    0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0b, 0x0b,
    0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0c, 0x0c,
    0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0d, 0x0d,
    0x0d, 0x0d, 0x0d, 0x0d, 0x0d, 0x0e, 0x0e, 0x0e,
    0x0e, 0x0e, 0x0e, 0x0e, 0x0f, 0x0f, 0x0f, 0x0f
};

// Created with modified gamma.c utility (GAMMA=2.5, planes=16, tableSize=4096)
// https://gist.github.com/embedded-creations/c2f6707af52de1c8e777b41e67265a58
// This table takes a 12-bit intensity and maps it to a 16-bit gamma corrected value
static const PROGMEM uint16_t lightPowerMap12to16bit[4096] = {
      0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
      0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
      0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
      0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,
      0x0000,0x0000,0x0000,0x0000,0x0000,0x0001,0x0001,0x0001,
      0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,
      0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,
      0x0001,0x0001,0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,
      0x0002,0x0002,0x0002,0x0002,0x0002,0x0002,0x0003,0x0003,
      0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,0x0003,
      0x0003,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,0x0004,
      0x0004,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,0x0005,
      0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0006,0x0007,
      0x0007,0x0007,0x0007,0x0007,0x0007,0x0008,0x0008,0x0008,
      0x0008,0x0008,0x0008,0x0009,0x0009,0x0009,0x0009,0x0009,
      0x000a,0x000a,0x000a,0x000a,0x000a,0x000b,0x000b,0x000b,
      0x000b,0x000c,0x000c,0x000c,0x000c,0x000c,0x000d,0x000d,
      0x000d,0x000d,0x000e,0x000e,0x000e,0x000e,0x000f,0x000f,
      0x000f,0x000f,0x0010,0x0010,0x0010,0x0011,0x0011,0x0011,
      0x0011,0x0012,0x0012,0x0012,0x0013,0x0013,0x0013,0x0013,
      0x0014,0x0014,0x0014,0x0015,0x0015,0x0015,0x0016,0x0016,
      0x0016,0x0017,0x0017,0x0017,0x0018,0x0018,0x0018,0x0019,
      0x0019,0x0019,0x001a,0x001a,0x001b,0x001b,0x001b,0x001c,
      0x001c,0x001c,0x001d,0x001d,0x001e,0x001e,0x001e,0x001f,
      0x001f,0x0020,0x0020,0x0020,0x0021,0x0021,0x0022,0x0022,
      0x0023,0x0023,0x0023,0x0024,0x0024,0x0025,0x0025,0x0026,
      0x0026,0x0027,0x0027,0x0027,0x0028,0x0028,0x0029,0x0029,
      0x002a,0x002a,0x002b,0x002b,0x002c,0x002c,0x002d,0x002d,
      0x002e,0x002e,0x002f,0x002f,0x0030,0x0030,0x0031,0x0031,
      0x0032,0x0033,0x0033,0x0034,0x0034,0x0035,0x0035,0x0036,
      0x0036,0x0037,0x0038,0x0038,0x0039,0x0039,0x003a,0x003b,
      0x003b,0x003c,0x003c,0x003d,0x003e,0x003e,0x003f,0x003f,
      0x0040,0x0041,0x0041,0x0042,0x0043,0x0043,0x0044,0x0044,
      0x0045,0x0046,0x0046,0x0047,0x0048,0x0048,0x0049,0x004a,
      0x004a,0x004b,0x004c,0x004d,0x004d,0x004e,0x004f,0x004f,
      0x0050,0x0051,0x0052,0x0052,0x0053,0x0054,0x0054,0x0055,
      0x0056,0x0057,0x0057,0x0058,0x0059,0x005a,0x005a,0x005b,
      0x005c,0x005d,0x005e,0x005e,0x005f,0x0060,0x0061,0x0062,
      0x0062,0x0063,0x0064,0x0065,0x0066,0x0066,0x0067,0x0068,
      0x0069,0x006a,0x006b,0x006b,0x006c,0x006d,0x006e,0x006f,
      0x0070,0x0071,0x0072,0x0072,0x0073,0x0074,0x0075,0x0076,
      0x0077,0x0078,0x0079,0x007a,0x007b,0x007c,0x007c,0x007d,
      0x007e,0x007f,0x0080,0x0081,0x0082,0x0083,0x0084,0x0085,
      0x0086,0x0087,0x0088,0x0089,0x008a,0x008b,0x008c,0x008d,
      0x008e,0x008f,0x0090,0x0091,0x0092,0x0093,0x0094,0x0095,
      0x0096,0x0097,0x0098,0x0099,0x009a,0x009b,0x009c,0x009d,
      0x009f,0x00a0,0x00a1,0x00a2,0x00a3,0x00a4,0x00a5,0x00a6,
      0x00a7,0x00a8,0x00aa,0x00ab,0x00ac,0x00ad,0x00ae,0x00af,
      0x00b0,0x00b2,0x00b3,0x00b4,0x00b5,0x00b6,0x00b7,0x00b9,
      0x00ba,0x00bb,0x00bc,0x00bd,0x00be,0x00c0,0x00c1,0x00c2,
      0x00c3,0x00c5,0x00c6,0x00c7,0x00c8,0x00c9,0x00cb,0x00cc,
      0x00cd,0x00ce,0x00d0,0x00d1,0x00d2,0x00d4,0x00d5,0x00d6,
      0x00d7,0x00d9,0x00da,0x00db,0x00dd,0x00de,0x00df,0x00e1,
      0x00e2,0x00e3,0x00e5,0x00e6,0x00e7,0x00e9,0x00ea,0x00eb,
      0x00ed,0x00ee,0x00ef,0x00f1,0x00f2,0x00f4,0x00f5,0x00f6,
      0x00f8,0x00f9,0x00fb,0x00fc,0x00fe,0x00ff,0x0100,0x0102,
      0x0103,0x0105,0x0106,0x0108,0x0109,0x010b,0x010c,0x010e,
      0x010f,0x0110,0x0112,0x0113,0x0115,0x0117,0x0118,0x011a,
      0x011b,0x011d,0x011e,0x0120,0x0121,0x0123,0x0124,0x0126,
      0x0127,0x0129,0x012b,0x012c,0x012e,0x012f,0x0131,0x0132,
      0x0134,0x0136,0x0137,0x0139,0x013b,0x013c,0x013e,0x013f,
      0x0141,0x0143,0x0144,0x0146,0x0148,0x0149,0x014b,0x014d,
      0x014e,0x0150,0x0152,0x0153,0x0155,0x0157,0x0159,0x015a,
      0x015c,0x015e,0x0160,0x0161,0x0163,0x0165,0x0167,0x0168,
      0x016a,0x016c,0x016e,0x016f,0x0171,0x0173,0x0175,0x0177,
      0x0178,0x017a,0x017c,0x017e,0x0180,0x0181,0x0183,0x0185,
      0x0187,0x0189,0x018b,0x018d,0x018e,0x0190,0x0192,0x0194,
      0x0196,0x0198,0x019a,0x019c,0x019e,0x019f,0x01a1,0x01a3,
      0x01a5,0x01a7,0x01a9,0x01ab,0x01ad,0x01af,0x01b1,0x01b3,
      0x01b5,0x01b7,0x01b9,0x01bb,0x01bd,0x01bf,0x01c1,0x01c3,
      0x01c5,0x01c7,0x01c9,0x01cb,0x01cd,0x01cf,0x01d1,0x01d3,
      0x01d5,0x01d7,0x01d9,0x01dc,0x01de,0x01e0,0x01e2,0x01e4,
      0x01e6,0x01e8,0x01ea,0x01ec,0x01ee,0x01f1,0x01f3,0x01f5,
      0x01f7,0x01f9,0x01fb,0x01fe,0x0200,0x0202,0x0204,0x0206,
      0x0208,0x020b,0x020d,0x020f,0x0211,0x0214,0x0216,0x0218,
      0x021a,0x021c,0x021f,0x0221,0x0223,0x0225,0x0228,0x022a,
      0x022c,0x022f,0x0231,0x0233,0x0236,0x0238,0x023a,0x023c,
      0x023f,0x0241,0x0243,0x0246,0x0248,0x024b,0x024d,0x024f,
      0x0252,0x0254,0x0256,0x0259,0x025b,0x025e,0x0260,0x0262,
      0x0265,0x0267,0x026a,0x026c,0x026f,0x0271,0x0274,0x0276,
      0x0278,0x027b,0x027d,0x0280,0x0282,0x0285,0x0287,0x028a,
      0x028c,0x028f,0x0291,0x0294,0x0297,0x0299,0x029c,0x029e,
      0x02a1,0x02a3,0x02a6,0x02a8,0x02ab,0x02ae,0x02b0,0x02b3,
      0x02b5,0x02b8,0x02bb,0x02bd,0x02c0,0x02c3,0x02c5,0x02c8,
      0x02ca,0x02cd,0x02d0,0x02d2,0x02d5,0x02d8,0x02db,0x02dd,
      0x02e0,0x02e3,0x02e5,0x02e8,0x02eb,0x02ee,0x02f0,0x02f3,
      0x02f6,0x02f9,0x02fb,0x02fe,0x0301,0x0304,0x0306,0x0309,
      0x030c,0x030f,0x0312,0x0314,0x0317,0x031a,0x031d,0x0320,
      0x0323,0x0325,0x0328,0x032b,0x032e,0x0331,0x0334,0x0337,
      0x033a,0x033d,0x033f,0x0342,0x0345,0x0348,0x034b,0x034e,
      0x0351,0x0354,0x0357,0x035a,0x035d,0x0360,0x0363,0x0366,
      0x0369,0x036c,0x036f,0x0372,0x0375,0x0378,0x037b,0x037e,
      0x0381,0x0384,0x0387,0x038a,0x038d,0x0390,0x0393,0x0396,
      0x039a,0x039d,0x03a0,0x03a3,0x03a6,0x03a9,0x03ac,0x03af,
      0x03b2,0x03b6,0x03b9,0x03bc,0x03bf,0x03c2,0x03c5,0x03c9,
      0x03cc,0x03cf,0x03d2,0x03d5,0x03d9,0x03dc,0x03df,0x03e2,
      0x03e6,0x03e9,0x03ec,0x03ef,0x03f3,0x03f6,0x03f9,0x03fd,
      0x0400,0x0403,0x0406,0x040a,0x040d,0x0410,0x0414,0x0417,
      0x041a,0x041e,0x0421,0x0424,0x0428,0x042b,0x042f,0x0432,
      0x0435,0x0439,0x043c,0x0440,0x0443,0x0447,0x044a,0x044d,
      0x0451,0x0454,0x0458,0x045b,0x045f,0x0462,0x0466,0x0469,
      0x046d,0x0470,0x0474,0x0477,0x047b,0x047e,0x0482,0x0485,
      0x0489,0x048c,0x0490,0x0494,0x0497,0x049b,0x049e,0x04a2,
      0x04a6,0x04a9,0x04ad,0x04b0,0x04b4,0x04b8,0x04bb,0x04bf,
      0x04c3,0x04c6,0x04ca,0x04ce,0x04d1,0x04d5,0x04d9,0x04dc,
      0x04e0,0x04e4,0x04e8,0x04eb,0x04ef,0x04f3,0x04f7,0x04fa,
      0x04fe,0x0502,0x0506,0x0509,0x050d,0x0511,0x0515,0x0519,
      0x051c,0x0520,0x0524,0x0528,0x052c,0x0530,0x0534,0x0537,
      0x053b,0x053f,0x0543,0x0547,0x054b,0x054f,0x0553,0x0557,
      0x055a,0x055e,0x0562,0x0566,0x056a,0x056e,0x0572,0x0576,
      0x057a,0x057e,0x0582,0x0586,0x058a,0x058e,0x0592,0x0596,
      0x059a,0x059e,0x05a2,0x05a6,0x05aa,0x05ae,0x05b3,0x05b7,
      0x05bb,0x05bf,0x05c3,0x05c7,0x05cb,0x05cf,0x05d3,0x05d8,
      0x05dc,0x05e0,0x05e4,0x05e8,0x05ec,0x05f0,0x05f5,0x05f9,
      0x05fd,0x0601,0x0605,0x060a,0x060e,0x0612,0x0616,0x061b,
      0x061f,0x0623,0x0627,0x062c,0x0630,0x0634,0x0639,0x063d,
      0x0641,0x0646,0x064a,0x064e,0x0653,0x0657,0x065b,0x0660,
      0x0664,0x0668,0x066d,0x0671,0x0675,0x067a,0x067e,0x0683,
      0x0687,0x068c,0x0690,0x0694,0x0699,0x069d,0x06a2,0x06a6,
      0x06ab,0x06af,0x06b4,0x06b8,0x06bd,0x06c1,0x06c6,0x06ca,
      0x06cf,0x06d3,0x06d8,0x06dc,0x06e1,0x06e6,0x06ea,0x06ef,
      0x06f3,0x06f8,0x06fd,0x0701,0x0706,0x070a,0x070f,0x0714,
      0x0718,0x071d,0x0722,0x0726,0x072b,0x0730,0x0734,0x0739,
      0x073e,0x0743,0x0747,0x074c,0x0751,0x0755,0x075a,0x075f,
      0x0764,0x0768,0x076d,0x0772,0x0777,0x077c,0x0780,0x0785,
      0x078a,0x078f,0x0794,0x0799,0x079d,0x07a2,0x07a7,0x07ac,
      0x07b1,0x07b6,0x07bb,0x07c0,0x07c4,0x07c9,0x07ce,0x07d3,
      0x07d8,0x07dd,0x07e2,0x07e7,0x07ec,0x07f1,0x07f6,0x07fb,
      0x0800,0x0805,0x080a,0x080f,0x0814,0x0819,0x081e,0x0823,
      0x0828,0x082d,0x0832,0x0837,0x083c,0x0842,0x0847,0x084c,
      0x0851,0x0856,0x085b,0x0860,0x0865,0x086b,0x0870,0x0875,
      0x087a,0x087f,0x0884,0x088a,0x088f,0x0894,0x0899,0x089f,
      0x08a4,0x08a9,0x08ae,0x08b3,0x08b9,0x08be,0x08c3,0x08c9,
      0x08ce,0x08d3,0x08d8,0x08de,0x08e3,0x08e8,0x08ee,0x08f3,
      0x08f8,0x08fe,0x0903,0x0909,0x090e,0x0913,0x0919,0x091e,
      0x0924,0x0929,0x092e,0x0934,0x0939,0x093f,0x0944,0x094a,
      0x094f,0x0955,0x095a,0x0960,0x0965,0x096b,0x0970,0x0976,
      0x097b,0x0981,0x0986,0x098c,0x0991,0x0997,0x099d,0x09a2,
      0x09a8,0x09ad,0x09b3,0x09b9,0x09be,0x09c4,0x09c9,0x09cf,
      0x09d5,0x09da,0x09e0,0x09e6,0x09eb,0x09f1,0x09f7,0x09fd,
      0x0a02,0x0a08,0x0a0e,0x0a13,0x0a19,0x0a1f,0x0a25,0x0a2a,
      0x0a30,0x0a36,0x0a3c,0x0a42,0x0a47,0x0a4d,0x0a53,0x0a59,
      0x0a5f,0x0a65,0x0a6a,0x0a70,0x0a76,0x0a7c,0x0a82,0x0a88,
      0x0a8e,0x0a94,0x0a9a,0x0a9f,0x0aa5,0x0aab,0x0ab1,0x0ab7,
      0x0abd,0x0ac3,0x0ac9,0x0acf,0x0ad5,0x0adb,0x0ae1,0x0ae7,
      0x0aed,0x0af3,0x0af9,0x0aff,0x0b05,0x0b0b,0x0b11,0x0b18,
      0x0b1e,0x0b24,0x0b2a,0x0b30,0x0b36,0x0b3c,0x0b42,0x0b48,
      0x0b4f,0x0b55,0x0b5b,0x0b61,0x0b67,0x0b6d,0x0b74,0x0b7a,
      0x0b80,0x0b86,0x0b8d,0x0b93,0x0b99,0x0b9f,0x0ba6,0x0bac,
      0x0bb2,0x0bb8,0x0bbf,0x0bc5,0x0bcb,0x0bd2,0x0bd8,0x0bde,
      0x0be5,0x0beb,0x0bf1,0x0bf8,0x0bfe,0x0c04,0x0c0b,0x0c11,
      0x0c18,0x0c1e,0x0c24,0x0c2b,0x0c31,0x0c38,0x0c3e,0x0c45,
      0x0c4b,0x0c52,0x0c58,0x0c5f,0x0c65,0x0c6c,0x0c72,0x0c79,
      0x0c7f,0x0c86,0x0c8c,0x0c93,0x0c99,0x0ca0,0x0ca6,0x0cad,
      0x0cb4,0x0cba,0x0cc1,0x0cc7,0x0cce,0x0cd5,0x0cdb,0x0ce2,
      0x0ce9,0x0cef,0x0cf6,0x0cfd,0x0d03,0x0d0a,0x0d11,0x0d18,
      0x0d1e,0x0d25,0x0d2c,0x0d32,0x0d39,0x0d40,0x0d47,0x0d4e,
      0x0d54,0x0d5b,0x0d62,0x0d69,0x0d70,0x0d76,0x0d7d,0x0d84,
      0x0d8b,0x0d92,0x0d99,0x0da0,0x0da6,0x0dad,0x0db4,0x0dbb,
      0x0dc2,0x0dc9,0x0dd0,0x0dd7,0x0dde,0x0de5,0x0dec,0x0df3,
      0x0dfa,0x0e01,0x0e08,0x0e0f,0x0e16,0x0e1d,0x0e24,0x0e2b,
      0x0e32,0x0e39,0x0e40,0x0e47,0x0e4e,0x0e55,0x0e5c,0x0e63,
      0x0e6b,0x0e72,0x0e79,0x0e80,0x0e87,0x0e8e,0x0e95,0x0e9d,
      0x0ea4,0x0eab,0x0eb2,0x0eb9,0x0ec1,0x0ec8,0x0ecf,0x0ed6,
      0x0edd,0x0ee5,0x0eec,0x0ef3,0x0efb,0x0f02,0x0f09,0x0f10,
      0x0f18,0x0f1f,0x0f26,0x0f2e,0x0f35,0x0f3c,0x0f44,0x0f4b,
      0x0f53,0x0f5a,0x0f61,0x0f69,0x0f70,0x0f78,0x0f7f,0x0f86,
      0x0f8e,0x0f95,0x0f9d,0x0fa4,0x0fac,0x0fb3,0x0fbb,0x0fc2,
      0x0fca,0x0fd1,0x0fd9,0x0fe0,0x0fe8,0x0fef,0x0ff7,0x0fff,
      0x1006,0x100e,0x1015,0x101d,0x1025,0x102c,0x1034,0x103b,
      0x1043,0x104b,0x1052,0x105a,0x1062,0x106a,0x1071,0x1079,
      0x1081,0x1088,0x1090,0x1098,0x10a0,0x10a7,0x10af,0x10b7,
      0x10bf,0x10c6,0x10ce,0x10d6,0x10de,0x10e6,0x10ee,0x10f5,
      0x10fd,0x1105,0x110d,0x1115,0x111d,0x1125,0x112d,0x1134,
      0x113c,0x1144,0x114c,0x1154,0x115c,0x1164,0x116c,0x1174,
      0x117c,0x1184,0x118c,0x1194,0x119c,0x11a4,0x11ac,0x11b4,
      0x11bc,0x11c4,0x11cc,0x11d4,0x11dd,0x11e5,0x11ed,0x11f5,
      0x11fd,0x1205,0x120d,0x1215,0x121e,0x1226,0x122e,0x1236,
      0x123e,0x1247,0x124f,0x1257,0x125f,0x1267,0x1270,0x1278,
      0x1280,0x1288,0x1291,0x1299,0x12a1,0x12aa,0x12b2,0x12ba,
      0x12c3,0x12cb,0x12d3,0x12dc,0x12e4,0x12ec,0x12f5,0x12fd,
      0x1306,0x130e,0x1316,0x131f,0x1327,0x1330,0x1338,0x1341,
      0x1349,0x1352,0x135a,0x1363,0x136b,0x1374,0x137c,0x1385,
      0x138d,0x1396,0x139e,0x13a7,0x13b0,0x13b8,0x13c1,0x13c9,
      0x13d2,0x13db,0x13e3,0x13ec,0x13f4,0x13fd,0x1406,0x140e,
      0x1417,0x1420,0x1429,0x1431,0x143a,0x1443,0x144b,0x1454,
      0x145d,0x1466,0x146e,0x1477,0x1480,0x1489,0x1492,0x149a,
      0x14a3,0x14ac,0x14b5,0x14be,0x14c7,0x14d0,0x14d8,0x14e1,
      0x14ea,0x14f3,0x14fc,0x1505,0x150e,0x1517,0x1520,0x1529,
      0x1532,0x153b,0x1544,0x154d,0x1556,0x155f,0x1568,0x1571,
      0x157a,0x1583,0x158c,0x1595,0x159e,0x15a7,0x15b0,0x15b9,
      0x15c2,0x15cb,0x15d5,0x15de,0x15e7,0x15f0,0x15f9,0x1602,
      0x160c,0x1615,0x161e,0x1627,0x1630,0x163a,0x1643,0x164c,
      0x1655,0x165f,0x1668,0x1671,0x167a,0x1684,0x168d,0x1696,
      0x16a0,0x16a9,0x16b2,0x16bc,0x16c5,0x16ce,0x16d8,0x16e1,
      0x16eb,0x16f4,0x16fd,0x1707,0x1710,0x171a,0x1723,0x172d,
      0x1736,0x1740,0x1749,0x1753,0x175c,0x1766,0x176f,0x1779,
      0x1782,0x178c,0x1795,0x179f,0x17a8,0x17b2,0x17bc,0x17c5,
      0x17cf,0x17d8,0x17e2,0x17ec,0x17f5,0x17ff,0x1809,0x1812,
      0x181c,0x1826,0x182f,0x1839,0x1843,0x184d,0x1856,0x1860,
      0x186a,0x1874,0x187d,0x1887,0x1891,0x189b,0x18a5,0x18ae,
      0x18b8,0x18c2,0x18cc,0x18d6,0x18e0,0x18ea,0x18f4,0x18fd,
      0x1907,0x1911,0x191b,0x1925,0x192f,0x1939,0x1943,0x194d,
      0x1957,0x1961,0x196b,0x1975,0x197f,0x1989,0x1993,0x199d,
      0x19a7,0x19b1,0x19bb,0x19c5,0x19cf,0x19da,0x19e4,0x19ee,
      0x19f8,0x1a02,0x1a0c,0x1a16,0x1a20,0x1a2b,0x1a35,0x1a3f,
      0x1a49,0x1a53,0x1a5e,0x1a68,0x1a72,0x1a7c,0x1a87,0x1a91,
      0x1a9b,0x1aa5,0x1ab0,0x1aba,0x1ac4,0x1acf,0x1ad9,0x1ae3,
      0x1aee,0x1af8,0x1b03,0x1b0d,0x1b17,0x1b22,0x1b2c,0x1b36,
      0x1b41,0x1b4b,0x1b56,0x1b60,0x1b6b,0x1b75,0x1b80,0x1b8a,
      0x1b95,0x1b9f,0x1baa,0x1bb4,0x1bbf,0x1bc9,0x1bd4,0x1bde,
      0x1be9,0x1bf4,0x1bfe,0x1c09,0x1c13,0x1c1e,0x1c29,0x1c33,
      0x1c3e,0x1c49,0x1c53,0x1c5e,0x1c69,0x1c73,0x1c7e,0x1c89,
      0x1c94,0x1c9e,0x1ca9,0x1cb4,0x1cbf,0x1cc9,0x1cd4,0x1cdf,
      0x1cea,0x1cf5,0x1cff,0x1d0a,0x1d15,0x1d20,0x1d2b,0x1d36,
      0x1d40,0x1d4b,0x1d56,0x1d61,0x1d6c,0x1d77,0x1d82,0x1d8d,
      0x1d98,0x1da3,0x1dae,0x1db9,0x1dc4,0x1dcf,0x1dda,0x1de5,
      0x1df0,0x1dfb,0x1e06,0x1e11,0x1e1c,0x1e27,0x1e32,0x1e3d,
      0x1e48,0x1e54,0x1e5f,0x1e6a,0x1e75,0x1e80,0x1e8b,0x1e96,
      0x1ea2,0x1ead,0x1eb8,0x1ec3,0x1ecf,0x1eda,0x1ee5,0x1ef0,
      0x1efb,0x1f07,0x1f12,0x1f1d,0x1f29,0x1f34,0x1f3f,0x1f4b,
      0x1f56,0x1f61,0x1f6d,0x1f78,0x1f83,0x1f8f,0x1f9a,0x1fa6,
      0x1fb1,0x1fbc,0x1fc8,0x1fd3,0x1fdf,0x1fea,0x1ff6,0x2001,
      0x200d,0x2018,0x2024,0x202f,0x203b,0x2046,0x2052,0x205d,
      0x2069,0x2075,0x2080,0x208c,0x2097,0x20a3,0x20af,0x20ba,
      0x20c6,0x20d2,0x20dd,0x20e9,0x20f5,0x2100,0x210c,0x2118,
      0x2123,0x212f,0x213b,0x2147,0x2152,0x215e,0x216a,0x2176,
      0x2182,0x218d,0x2199,0x21a5,0x21b1,0x21bd,0x21c9,0x21d4,
      0x21e0,0x21ec,0x21f8,0x2204,0x2210,0x221c,0x2228,0x2234,
      0x2240,0x224c,0x2258,0x2264,0x2270,0x227c,0x2288,0x2294,
      0x22a0,0x22ac,0x22b8,0x22c4,0x22d0,0x22dc,0x22e8,0x22f4,
      0x2300,0x230d,0x2319,0x2325,0x2331,0x233d,0x2349,0x2356,
      0x2362,0x236e,0x237a,0x2386,0x2393,0x239f,0x23ab,0x23b7,
      0x23c4,0x23d0,0x23dc,0x23e9,0x23f5,0x2401,0x240d,0x241a,
      0x2426,0x2433,0x243f,0x244b,0x2458,0x2464,0x2471,0x247d,
      0x2489,0x2496,0x24a2,0x24af,0x24bb,0x24c8,0x24d4,0x24e1,
      0x24ed,0x24fa,0x2506,0x2513,0x251f,0x252c,0x2538,0x2545,
      0x2552,0x255e,0x256b,0x2577,0x2584,0x2591,0x259d,0x25aa,
      0x25b7,0x25c3,0x25d0,0x25dd,0x25ea,0x25f6,0x2603,0x2610,
      0x261c,0x2629,0x2636,0x2643,0x2650,0x265c,0x2669,0x2676,
      0x2683,0x2690,0x269d,0x26a9,0x26b6,0x26c3,0x26d0,0x26dd,
      0x26ea,0x26f7,0x2704,0x2711,0x271e,0x272b,0x2738,0x2745,
      0x2752,0x275f,0x276c,0x2779,0x2786,0x2793,0x27a0,0x27ad,
      0x27ba,0x27c7,0x27d4,0x27e1,0x27ee,0x27fb,0x2808,0x2816,
      0x2823,0x2830,0x283d,0x284a,0x2858,0x2865,0x2872,0x287f,
      0x288c,0x289a,0x28a7,0x28b4,0x28c1,0x28cf,0x28dc,0x28e9,
      0x28f7,0x2904,0x2911,0x291f,0x292c,0x2939,0x2947,0x2954,
      0x2962,0x296f,0x297c,0x298a,0x2997,0x29a5,0x29b2,0x29c0,
      0x29cd,0x29db,0x29e8,0x29f6,0x2a03,0x2a11,0x2a1e,0x2a2c,
      0x2a39,0x2a47,0x2a54,0x2a62,0x2a70,0x2a7d,0x2a8b,0x2a98,
      0x2aa6,0x2ab4,0x2ac1,0x2acf,0x2add,0x2aeb,0x2af8,0x2b06,
      0x2b14,0x2b21,0x2b2f,0x2b3d,0x2b4b,0x2b58,0x2b66,0x2b74,
      0x2b82,0x2b90,0x2b9d,0x2bab,0x2bb9,0x2bc7,0x2bd5,0x2be3,
      0x2bf1,0x2bff,0x2c0c,0x2c1a,0x2c28,0x2c36,0x2c44,0x2c52,
      0x2c60,0x2c6e,0x2c7c,0x2c8a,0x2c98,0x2ca6,0x2cb4,0x2cc2,
      0x2cd0,0x2cde,0x2cec,0x2cfa,0x2d09,0x2d17,0x2d25,0x2d33,
      0x2d41,0x2d4f,0x2d5d,0x2d6c,0x2d7a,0x2d88,0x2d96,0x2da4,
      0x2db3,0x2dc1,0x2dcf,0x2ddd,0x2dec,0x2dfa,0x2e08,0x2e16,
      0x2e25,0x2e33,0x2e41,0x2e50,0x2e5e,0x2e6c,0x2e7b,0x2e89,
      0x2e97,0x2ea6,0x2eb4,0x2ec3,0x2ed1,0x2ee0,0x2eee,0x2efc,
      0x2f0b,0x2f19,0x2f28,0x2f36,0x2f45,0x2f53,0x2f62,0x2f70,
      0x2f7f,0x2f8e,0x2f9c,0x2fab,0x2fb9,0x2fc8,0x2fd7,0x2fe5,
      0x2ff4,0x3002,0x3011,0x3020,0x302f,0x303d,0x304c,0x305b,
      0x3069,0x3078,0x3087,0x3096,0x30a4,0x30b3,0x30c2,0x30d1,
      0x30df,0x30ee,0x30fd,0x310c,0x311b,0x312a,0x3139,0x3147,
      0x3156,0x3165,0x3174,0x3183,0x3192,0x31a1,0x31b0,0x31bf,
      0x31ce,0x31dd,0x31ec,0x31fb,0x320a,0x3219,0x3228,0x3237,
      0x3246,0x3255,0x3264,0x3273,0x3282,0x3291,0x32a1,0x32b0,
      0x32bf,0x32ce,0x32dd,0x32ec,0x32fb,0x330b,0x331a,0x3329,
      0x3338,0x3348,0x3357,0x3366,0x3375,0x3385,0x3394,0x33a3,
      0x33b3,0x33c2,0x33d1,0x33e1,0x33f0,0x33ff,0x340f,0x341e,
      0x342d,0x343d,0x344c,0x345c,0x346b,0x347b,0x348a,0x3499,
      0x34a9,0x34b8,0x34c8,0x34d7,0x34e7,0x34f7,0x3506,0x3516,
      0x3525,0x3535,0x3544,0x3554,0x3564,0x3573,0x3583,0x3592,
      0x35a2,0x35b2,0x35c1,0x35d1,0x35e1,0x35f1,0x3600,0x3610,
      0x3620,0x3630,0x363f,0x364f,0x365f,0x366f,0x367e,0x368e,
      0x369e,0x36ae,0x36be,0x36ce,0x36dd,0x36ed,0x36fd,0x370d,
      0x371d,0x372d,0x373d,0x374d,0x375d,0x376d,0x377d,0x378d,
      0x379d,0x37ad,0x37bd,0x37cd,0x37dd,0x37ed,0x37fd,0x380d,
      0x381d,0x382d,0x383d,0x384d,0x385e,0x386e,0x387e,0x388e,
      0x389e,0x38ae,0x38bf,0x38cf,0x38df,0x38ef,0x38ff,0x3910,
      0x3920,0x3930,0x3940,0x3951,0x3961,0x3971,0x3982,0x3992,
      0x39a2,0x39b3,0x39c3,0x39d3,0x39e4,0x39f4,0x3a05,0x3a15,
      0x3a26,0x3a36,0x3a46,0x3a57,0x3a67,0x3a78,0x3a88,0x3a99,
      0x3aa9,0x3aba,0x3aca,0x3adb,0x3aec,0x3afc,0x3b0d,0x3b1d,
      0x3b2e,0x3b3f,0x3b4f,0x3b60,0x3b70,0x3b81,0x3b92,0x3ba2,
      0x3bb3,0x3bc4,0x3bd5,0x3be5,0x3bf6,0x3c07,0x3c18,0x3c28,
      0x3c39,0x3c4a,0x3c5b,0x3c6c,0x3c7c,0x3c8d,0x3c9e,0x3caf,
      0x3cc0,0x3cd1,0x3ce2,0x3cf2,0x3d03,0x3d14,0x3d25,0x3d36,
      0x3d47,0x3d58,0x3d69,0x3d7a,0x3d8b,0x3d9c,0x3dad,0x3dbe,
      0x3dcf,0x3de0,0x3df1,0x3e02,0x3e13,0x3e25,0x3e36,0x3e47,
      0x3e58,0x3e69,0x3e7a,0x3e8b,0x3e9d,0x3eae,0x3ebf,0x3ed0,
      0x3ee1,0x3ef3,0x3f04,0x3f15,0x3f26,0x3f38,0x3f49,0x3f5a,
      0x3f6c,0x3f7d,0x3f8e,0x3fa0,0x3fb1,0x3fc2,0x3fd4,0x3fe5,
      0x3ff6,0x4008,0x4019,0x402b,0x403c,0x404e,0x405f,0x4071,
      0x4082,0x4094,0x40a5,0x40b7,0x40c8,0x40da,0x40eb,0x40fd,
      0x410e,0x4120,0x4132,0x4143,0x4155,0x4166,0x4178,0x418a,
      0x419b,0x41ad,0x41bf,0x41d0,0x41e2,0x41f4,0x4206,0x4217,
      0x4229,0x423b,0x424d,0x425e,0x4270,0x4282,0x4294,0x42a6,
      0x42b8,0x42c9,0x42db,0x42ed,0x42ff,0x4311,0x4323,0x4335,
      0x4347,0x4359,0x436b,0x437d,0x438f,0x43a1,0x43b3,0x43c5,
      0x43d7,0x43e9,0x43fb,0x440d,0x441f,0x4431,0x4443,0x4455,
      0x4467,0x4479,0x448b,0x449e,0x44b0,0x44c2,0x44d4,0x44e6,
      0x44f9,0x450b,0x451d,0x452f,0x4541,0x4554,0x4566,0x4578,
      0x458b,0x459d,0x45af,0x45c2,0x45d4,0x45e6,0x45f9,0x460b,
      0x461d,0x4630,0x4642,0x4655,0x4667,0x4679,0x468c,0x469e,
      0x46b1,0x46c3,0x46d6,0x46e8,0x46fb,0x470d,0x4720,0x4732,
      0x4745,0x4758,0x476a,0x477d,0x478f,0x47a2,0x47b5,0x47c7,
      0x47da,0x47ed,0x47ff,0x4812,0x4825,0x4837,0x484a,0x485d,
      0x4870,0x4882,0x4895,0x48a8,0x48bb,0x48ce,0x48e0,0x48f3,
      0x4906,0x4919,0x492c,0x493f,0x4951,0x4964,0x4977,0x498a,
      0x499d,0x49b0,0x49c3,0x49d6,0x49e9,0x49fc,0x4a0f,0x4a22,
      0x4a35,0x4a48,0x4a5b,0x4a6e,0x4a81,0x4a94,0x4aa7,0x4aba,
      0x4ace,0x4ae1,0x4af4,0x4b07,0x4b1a,0x4b2d,0x4b40,0x4b54,
      0x4b67,0x4b7a,0x4b8d,0x4ba1,0x4bb4,0x4bc7,0x4bda,0x4bee,
      0x4c01,0x4c14,0x4c28,0x4c3b,0x4c4e,0x4c62,0x4c75,0x4c88,
      0x4c9c,0x4caf,0x4cc3,0x4cd6,0x4ce9,0x4cfd,0x4d10,0x4d24,
      0x4d37,0x4d4b,0x4d5e,0x4d72,0x4d85,0x4d99,0x4dac,0x4dc0,
      0x4dd4,0x4de7,0x4dfb,0x4e0e,0x4e22,0x4e36,0x4e49,0x4e5d,
      0x4e71,0x4e84,0x4e98,0x4eac,0x4ebf,0x4ed3,0x4ee7,0x4efb,
      0x4f0e,0x4f22,0x4f36,0x4f4a,0x4f5d,0x4f71,0x4f85,0x4f99,
      0x4fad,0x4fc1,0x4fd4,0x4fe8,0x4ffc,0x5010,0x5024,0x5038,
      0x504c,0x5060,0x5074,0x5088,0x509c,0x50b0,0x50c4,0x50d8,
      0x50ec,0x5100,0x5114,0x5128,0x513c,0x5150,0x5164,0x5179,
      0x518d,0x51a1,0x51b5,0x51c9,0x51dd,0x51f1,0x5206,0x521a,
      0x522e,0x5242,0x5257,0x526b,0x527f,0x5293,0x52a8,0x52bc,
      0x52d0,0x52e5,0x52f9,0x530d,0x5322,0x5336,0x534a,0x535f,
      0x5373,0x5388,0x539c,0x53b1,0x53c5,0x53d9,0x53ee,0x5402,
      0x5417,0x542b,0x5440,0x5455,0x5469,0x547e,0x5492,0x54a7,
      0x54bb,0x54d0,0x54e5,0x54f9,0x550e,0x5523,0x5537,0x554c,
      0x5561,0x5575,0x558a,0x559f,0x55b4,0x55c8,0x55dd,0x55f2,
      0x5607,0x561b,0x5630,0x5645,0x565a,0x566f,0x5684,0x5698,
      0x56ad,0x56c2,0x56d7,0x56ec,0x5701,0x5716,0x572b,0x5740,
      0x5755,0x576a,0x577f,0x5794,0x57a9,0x57be,0x57d3,0x57e8,
      0x57fd,0x5812,0x5827,0x583c,0x5851,0x5867,0x587c,0x5891,
      0x58a6,0x58bb,0x58d0,0x58e6,0x58fb,0x5910,0x5925,0x593a,
      0x5950,0x5965,0x597a,0x5990,0x59a5,0x59ba,0x59d0,0x59e5,
      0x59fa,0x5a10,0x5a25,0x5a3a,0x5a50,0x5a65,0x5a7b,0x5a90,
      0x5aa5,0x5abb,0x5ad0,0x5ae6,0x5afb,0x5b11,0x5b26,0x5b3c,
      0x5b51,0x5b67,0x5b7d,0x5b92,0x5ba8,0x5bbd,0x5bd3,0x5be9,
      0x5bfe,0x5c14,0x5c2a,0x5c3f,0x5c55,0x5c6b,0x5c80,0x5c96,
      0x5cac,0x5cc2,0x5cd7,0x5ced,0x5d03,0x5d19,0x5d2e,0x5d44,
      0x5d5a,0x5d70,0x5d86,0x5d9c,0x5db2,0x5dc7,0x5ddd,0x5df3,
      0x5e09,0x5e1f,0x5e35,0x5e4b,0x5e61,0x5e77,0x5e8d,0x5ea3,
      0x5eb9,0x5ecf,0x5ee5,0x5efb,0x5f11,0x5f27,0x5f3d,0x5f54,
      0x5f6a,0x5f80,0x5f96,0x5fac,0x5fc2,0x5fd8,0x5fef,0x6005,
      0x601b,0x6031,0x6047,0x605e,0x6074,0x608a,0x60a1,0x60b7,
      0x60cd,0x60e4,0x60fa,0x6110,0x6127,0x613d,0x6153,0x616a,
      0x6180,0x6197,0x61ad,0x61c3,0x61da,0x61f0,0x6207,0x621d,
      0x6234,0x624a,0x6261,0x6277,0x628e,0x62a5,0x62bb,0x62d2,
      0x62e8,0x62ff,0x6316,0x632c,0x6343,0x6359,0x6370,0x6387,
      0x639e,0x63b4,0x63cb,0x63e2,0x63f8,0x640f,0x6426,0x643d,
      0x6454,0x646a,0x6481,0x6498,0x64af,0x64c6,0x64dd,0x64f3,
      0x650a,0x6521,0x6538,0x654f,0x6566,0x657d,0x6594,0x65ab,
      0x65c2,0x65d9,0x65f0,0x6607,0x661e,0x6635,0x664c,0x6663,
      0x667a,0x6691,0x66a8,0x66c0,0x66d7,0x66ee,0x6705,0x671c,
      0x6733,0x674b,0x6762,0x6779,0x6790,0x67a8,0x67bf,0x67d6,
      0x67ed,0x6805,0x681c,0x6833,0x684b,0x6862,0x6879,0x6891,
      0x68a8,0x68bf,0x68d7,0x68ee,0x6906,0x691d,0x6935,0x694c,
      0x6964,0x697b,0x6993,0x69aa,0x69c2,0x69d9,0x69f1,0x6a08,
      0x6a20,0x6a37,0x6a4f,0x6a67,0x6a7e,0x6a96,0x6aae,0x6ac5,
      0x6add,0x6af5,0x6b0c,0x6b24,0x6b3c,0x6b53,0x6b6b,0x6b83,
      0x6b9b,0x6bb3,0x6bca,0x6be2,0x6bfa,0x6c12,0x6c2a,0x6c41,
      0x6c59,0x6c71,0x6c89,0x6ca1,0x6cb9,0x6cd1,0x6ce9,0x6d01,
      0x6d19,0x6d31,0x6d49,0x6d61,0x6d79,0x6d91,0x6da9,0x6dc1,
      0x6dd9,0x6df1,0x6e09,0x6e21,0x6e39,0x6e52,0x6e6a,0x6e82,
      0x6e9a,0x6eb2,0x6eca,0x6ee3,0x6efb,0x6f13,0x6f2b,0x6f44,
      0x6f5c,0x6f74,0x6f8c,0x6fa5,0x6fbd,0x6fd5,0x6fee,0x7006,
      0x701e,0x7037,0x704f,0x7068,0x7080,0x7098,0x70b1,0x70c9,
      0x70e2,0x70fa,0x7113,0x712b,0x7144,0x715c,0x7175,0x718d,
      0x71a6,0x71bf,0x71d7,0x71f0,0x7208,0x7221,0x723a,0x7252,
      0x726b,0x7284,0x729c,0x72b5,0x72ce,0x72e6,0x72ff,0x7318,
      0x7331,0x7349,0x7362,0x737b,0x7394,0x73ad,0x73c6,0x73de,
      0x73f7,0x7410,0x7429,0x7442,0x745b,0x7474,0x748d,0x74a6,
      0x74bf,0x74d8,0x74f1,0x750a,0x7523,0x753c,0x7555,0x756e,
      0x7587,0x75a0,0x75b9,0x75d2,0x75eb,0x7604,0x761d,0x7637,
      0x7650,0x7669,0x7682,0x769b,0x76b5,0x76ce,0x76e7,0x7700,
      0x771a,0x7733,0x774c,0x7765,0x777f,0x7798,0x77b1,0x77cb,
      0x77e4,0x77fe,0x7817,0x7830,0x784a,0x7863,0x787d,0x7896,
      0x78b0,0x78c9,0x78e3,0x78fc,0x7916,0x792f,0x7949,0x7962,
      0x797c,0x7995,0x79af,0x79c9,0x79e2,0x79fc,0x7a15,0x7a2f,
      0x7a49,0x7a62,0x7a7c,0x7a96,0x7ab0,0x7ac9,0x7ae3,0x7afd,
      0x7b17,0x7b30,0x7b4a,0x7b64,0x7b7e,0x7b98,0x7bb2,0x7bcb,
      0x7be5,0x7bff,0x7c19,0x7c33,0x7c4d,0x7c67,0x7c81,0x7c9b,
      0x7cb5,0x7ccf,0x7ce9,0x7d03,0x7d1d,0x7d37,0x7d51,0x7d6b,
      0x7d85,0x7d9f,0x7db9,0x7dd3,0x7ded,0x7e07,0x7e22,0x7e3c,
      0x7e56,0x7e70,0x7e8a,0x7ea5,0x7ebf,0x7ed9,0x7ef3,0x7f0e,
      0x7f28,0x7f42,0x7f5c,0x7f77,0x7f91,0x7fab,0x7fc6,0x7fe0,
      0x7ffb,0x8015,0x802f,0x804a,0x8064,0x807f,0x8099,0x80b4,
      0x80ce,0x80e9,0x8103,0x811e,0x8138,0x8153,0x816d,0x8188,
      0x81a2,0x81bd,0x81d8,0x81f2,0x820d,0x8228,0x8242,0x825d,
      0x8278,0x8292,0x82ad,0x82c8,0x82e2,0x82fd,0x8318,0x8333,
      0x834d,0x8368,0x8383,0x839e,0x83b9,0x83d4,0x83ee,0x8409,
      0x8424,0x843f,0x845a,0x8475,0x8490,0x84ab,0x84c6,0x84e1,
      0x84fc,0x8517,0x8532,0x854d,0x8568,0x8583,0x859e,0x85b9,
      0x85d4,0x85ef,0x860b,0x8626,0x8641,0x865c,0x8677,0x8692,
      0x86ae,0x86c9,0x86e4,0x86ff,0x871a,0x8736,0x8751,0x876c,
      0x8788,0x87a3,0x87be,0x87da,0x87f5,0x8810,0x882c,0x8847,
      0x8863,0x887e,0x8899,0x88b5,0x88d0,0x88ec,0x8907,0x8923,
      0x893e,0x895a,0x8975,0x8991,0x89ac,0x89c8,0x89e4,0x89ff,
      0x8a1b,0x8a36,0x8a52,0x8a6e,0x8a89,0x8aa5,0x8ac1,0x8adc,
      0x8af8,0x8b14,0x8b30,0x8b4b,0x8b67,0x8b83,0x8b9f,0x8bbb,
      0x8bd6,0x8bf2,0x8c0e,0x8c2a,0x8c46,0x8c62,0x8c7e,0x8c9a,
      0x8cb5,0x8cd1,0x8ced,0x8d09,0x8d25,0x8d41,0x8d5d,0x8d79,
      0x8d95,0x8db1,0x8dcd,0x8de9,0x8e06,0x8e22,0x8e3e,0x8e5a,
      0x8e76,0x8e92,0x8eae,0x8eca,0x8ee7,0x8f03,0x8f1f,0x8f3b,
      0x8f58,0x8f74,0x8f90,0x8fac,0x8fc9,0x8fe5,0x9001,0x901e,
      0x903a,0x9056,0x9073,0x908f,0x90ab,0x90c8,0x90e4,0x9101,
      0x911d,0x913a,0x9156,0x9173,0x918f,0x91ac,0x91c8,0x91e5,
      0x9201,0x921e,0x923a,0x9257,0x9274,0x9290,0x92ad,0x92c9,
      0x92e6,0x9303,0x931f,0x933c,0x9359,0x9376,0x9392,0x93af,
      0x93cc,0x93e9,0x9405,0x9422,0x943f,0x945c,0x9479,0x9496,
      0x94b2,0x94cf,0x94ec,0x9509,0x9526,0x9543,0x9560,0x957d,
      0x959a,0x95b7,0x95d4,0x95f1,0x960e,0x962b,0x9648,0x9665,
      0x9682,0x969f,0x96bc,0x96d9,0x96f6,0x9714,0x9731,0x974e,
      0x976b,0x9788,0x97a6,0x97c3,0x97e0,0x97fd,0x981a,0x9838,
      0x9855,0x9872,0x9890,0x98ad,0x98ca,0x98e8,0x9905,0x9922,
      0x9940,0x995d,0x997b,0x9998,0x99b6,0x99d3,0x99f0,0x9a0e,
      0x9a2b,0x9a49,0x9a66,0x9a84,0x9aa2,0x9abf,0x9add,0x9afa,
      0x9b18,0x9b36,0x9b53,0x9b71,0x9b8e,0x9bac,0x9bca,0x9be8,
      0x9c05,0x9c23,0x9c41,0x9c5e,0x9c7c,0x9c9a,0x9cb8,0x9cd6,
      0x9cf3,0x9d11,0x9d2f,0x9d4d,0x9d6b,0x9d89,0x9da7,0x9dc5,
      0x9de2,0x9e00,0x9e1e,0x9e3c,0x9e5a,0x9e78,0x9e96,0x9eb4,
      0x9ed2,0x9ef0,0x9f0e,0x9f2c,0x9f4b,0x9f69,0x9f87,0x9fa5,
      0x9fc3,0x9fe1,0x9fff,0xa01e,0xa03c,0xa05a,0xa078,0xa096,
      0xa0b5,0xa0d3,0xa0f1,0xa10f,0xa12e,0xa14c,0xa16a,0xa189,
      0xa1a7,0xa1c5,0xa1e4,0xa202,0xa221,0xa23f,0xa25d,0xa27c,
      0xa29a,0xa2b9,0xa2d7,0xa2f6,0xa314,0xa333,0xa351,0xa370,
      0xa38e,0xa3ad,0xa3cc,0xa3ea,0xa409,0xa427,0xa446,0xa465,
      0xa483,0xa4a2,0xa4c1,0xa4e0,0xa4fe,0xa51d,0xa53c,0xa55b,
      0xa579,0xa598,0xa5b7,0xa5d6,0xa5f5,0xa613,0xa632,0xa651,
      0xa670,0xa68f,0xa6ae,0xa6cd,0xa6ec,0xa70b,0xa72a,0xa749,
      0xa768,0xa787,0xa7a6,0xa7c5,0xa7e4,0xa803,0xa822,0xa841,
      0xa860,0xa87f,0xa89e,0xa8bd,0xa8dd,0xa8fc,0xa91b,0xa93a,
      0xa959,0xa979,0xa998,0xa9b7,0xa9d6,0xa9f6,0xaa15,0xaa34,
      0xaa54,0xaa73,0xaa92,0xaab2,0xaad1,0xaaf0,0xab10,0xab2f,
      0xab4f,0xab6e,0xab8d,0xabad,0xabcc,0xabec,0xac0b,0xac2b,
      0xac4a,0xac6a,0xac8a,0xaca9,0xacc9,0xace8,0xad08,0xad28,
      0xad47,0xad67,0xad87,0xada6,0xadc6,0xade6,0xae05,0xae25,
      0xae45,0xae65,0xae84,0xaea4,0xaec4,0xaee4,0xaf04,0xaf23,
      0xaf43,0xaf63,0xaf83,0xafa3,0xafc3,0xafe3,0xb003,0xb023,
      0xb043,0xb063,0xb083,0xb0a3,0xb0c3,0xb0e3,0xb103,0xb123,
      0xb143,0xb163,0xb183,0xb1a3,0xb1c3,0xb1e3,0xb204,0xb224,
      0xb244,0xb264,0xb284,0xb2a5,0xb2c5,0xb2e5,0xb305,0xb326,
      0xb346,0xb366,0xb387,0xb3a7,0xb3c7,0xb3e8,0xb408,0xb428,
      0xb449,0xb469,0xb48a,0xb4aa,0xb4cb,0xb4eb,0xb50c,0xb52c,
      0xb54d,0xb56d,0xb58e,0xb5ae,0xb5cf,0xb5ef,0xb610,0xb631,
      0xb651,0xb672,0xb692,0xb6b3,0xb6d4,0xb6f4,0xb715,0xb736,
      0xb757,0xb777,0xb798,0xb7b9,0xb7da,0xb7fb,0xb81b,0xb83c,
      0xb85d,0xb87e,0xb89f,0xb8c0,0xb8e0,0xb901,0xb922,0xb943,
      0xb964,0xb985,0xb9a6,0xb9c7,0xb9e8,0xba09,0xba2a,0xba4b,
      0xba6c,0xba8d,0xbaae,0xbad0,0xbaf1,0xbb12,0xbb33,0xbb54,
      0xbb75,0xbb96,0xbbb8,0xbbd9,0xbbfa,0xbc1b,0xbc3d,0xbc5e,
      0xbc7f,0xbca0,0xbcc2,0xbce3,0xbd04,0xbd26,0xbd47,0xbd69,
      0xbd8a,0xbdab,0xbdcd,0xbdee,0xbe10,0xbe31,0xbe53,0xbe74,
      0xbe96,0xbeb7,0xbed9,0xbefa,0xbf1c,0xbf3d,0xbf5f,0xbf80,
      0xbfa2,0xbfc4,0xbfe5,0xc007,0xc029,0xc04a,0xc06c,0xc08e,
      0xc0af,0xc0d1,0xc0f3,0xc115,0xc137,0xc158,0xc17a,0xc19c,
      0xc1be,0xc1e0,0xc201,0xc223,0xc245,0xc267,0xc289,0xc2ab,
      0xc2cd,0xc2ef,0xc311,0xc333,0xc355,0xc377,0xc399,0xc3bb,
      0xc3dd,0xc3ff,0xc421,0xc443,0xc465,0xc487,0xc4aa,0xc4cc,
      0xc4ee,0xc510,0xc532,0xc555,0xc577,0xc599,0xc5bb,0xc5de,
      0xc600,0xc622,0xc644,0xc667,0xc689,0xc6ab,0xc6ce,0xc6f0,
      0xc713,0xc735,0xc757,0xc77a,0xc79c,0xc7bf,0xc7e1,0xc804,
      0xc826,0xc849,0xc86b,0xc88e,0xc8b0,0xc8d3,0xc8f5,0xc918,
      0xc93b,0xc95d,0xc980,0xc9a3,0xc9c5,0xc9e8,0xca0b,0xca2d,
      0xca50,0xca73,0xca96,0xcab8,0xcadb,0xcafe,0xcb21,0xcb44,
      0xcb66,0xcb89,0xcbac,0xcbcf,0xcbf2,0xcc15,0xcc38,0xcc5b,
      0xcc7e,0xcca1,0xccc3,0xcce6,0xcd09,0xcd2d,0xcd50,0xcd73,
      0xcd96,0xcdb9,0xcddc,0xcdff,0xce22,0xce45,0xce68,0xce8b,
      0xceaf,0xced2,0xcef5,0xcf18,0xcf3b,0xcf5f,0xcf82,0xcfa5,
      0xcfc9,0xcfec,0xd00f,0xd032,0xd056,0xd079,0xd09d,0xd0c0,
      0xd0e3,0xd107,0xd12a,0xd14e,0xd171,0xd195,0xd1b8,0xd1db,
      0xd1ff,0xd223,0xd246,0xd26a,0xd28d,0xd2b1,0xd2d4,0xd2f8,
      0xd31c,0xd33f,0xd363,0xd387,0xd3aa,0xd3ce,0xd3f2,0xd415,
      0xd439,0xd45d,0xd481,0xd4a4,0xd4c8,0xd4ec,0xd510,0xd534,
      0xd557,0xd57b,0xd59f,0xd5c3,0xd5e7,0xd60b,0xd62f,0xd653,
      0xd677,0xd69b,0xd6bf,0xd6e3,0xd707,0xd72b,0xd74f,0xd773,
      0xd797,0xd7bb,0xd7df,0xd803,0xd827,0xd84c,0xd870,0xd894,
      0xd8b8,0xd8dc,0xd901,0xd925,0xd949,0xd96d,0xd992,0xd9b6,
      0xd9da,0xd9fe,0xda23,0xda47,0xda6b,0xda90,0xdab4,0xdad9,
      0xdafd,0xdb21,0xdb46,0xdb6a,0xdb8f,0xdbb3,0xdbd8,0xdbfc,
      0xdc21,0xdc45,0xdc6a,0xdc8f,0xdcb3,0xdcd8,0xdcfc,0xdd21,
      0xdd46,0xdd6a,0xdd8f,0xddb4,0xddd8,0xddfd,0xde22,0xde47,
      0xde6b,0xde90,0xdeb5,0xdeda,0xdefe,0xdf23,0xdf48,0xdf6d,
      0xdf92,0xdfb7,0xdfdc,0xe001,0xe025,0xe04a,0xe06f,0xe094,
      0xe0b9,0xe0de,0xe103,0xe128,0xe14d,0xe172,0xe198,0xe1bd,
      0xe1e2,0xe207,0xe22c,0xe251,0xe276,0xe29b,0xe2c1,0xe2e6,
      0xe30b,0xe330,0xe355,0xe37b,0xe3a0,0xe3c5,0xe3eb,0xe410,
      0xe435,0xe45b,0xe480,0xe4a5,0xe4cb,0xe4f0,0xe515,0xe53b,
      0xe560,0xe586,0xe5ab,0xe5d1,0xe5f6,0xe61c,0xe641,0xe667,
      0xe68c,0xe6b2,0xe6d8,0xe6fd,0xe723,0xe748,0xe76e,0xe794,
      0xe7b9,0xe7df,0xe805,0xe82a,0xe850,0xe876,0xe89c,0xe8c1,
      0xe8e7,0xe90d,0xe933,0xe959,0xe97f,0xe9a4,0xe9ca,0xe9f0,
      0xea16,0xea3c,0xea62,0xea88,0xeaae,0xead4,0xeafa,0xeb20,
      0xeb46,0xeb6c,0xeb92,0xebb8,0xebde,0xec04,0xec2a,0xec50,
      0xec76,0xec9d,0xecc3,0xece9,0xed0f,0xed35,0xed5c,0xed82,
      0xeda8,0xedce,0xedf5,0xee1b,0xee41,0xee67,0xee8e,0xeeb4,
      0xeedb,0xef01,0xef27,0xef4e,0xef74,0xef9b,0xefc1,0xefe7,
      0xf00e,0xf034,0xf05b,0xf081,0xf0a8,0xf0cf,0xf0f5,0xf11c,
      0xf142,0xf169,0xf190,0xf1b6,0xf1dd,0xf203,0xf22a,0xf251,
      0xf278,0xf29e,0xf2c5,0xf2ec,0xf313,0xf339,0xf360,0xf387,
      0xf3ae,0xf3d5,0xf3fb,0xf422,0xf449,0xf470,0xf497,0xf4be,
      0xf4e5,0xf50c,0xf533,0xf55a,0xf581,0xf5a8,0xf5cf,0xf5f6,
      0xf61d,0xf644,0xf66b,0xf692,0xf6b9,0xf6e0,0xf708,0xf72f,
      0xf756,0xf77d,0xf7a4,0xf7cc,0xf7f3,0xf81a,0xf841,0xf869,
      0xf890,0xf8b7,0xf8de,0xf906,0xf92d,0xf955,0xf97c,0xf9a3,
      0xf9cb,0xf9f2,0xfa1a,0xfa41,0xfa69,0xfa90,0xfab7,0xfadf,
      0xfb07,0xfb2e,0xfb56,0xfb7d,0xfba5,0xfbcc,0xfbf4,0xfc1c,
      0xfc43,0xfc6b,0xfc93,0xfcba,0xfce2,0xfd0a,0xfd31,0xfd59,
      0xfd81,0xfda9,0xfdd0,0xfdf8,0xfe20,0xfe48,0xfe70,0xfe98,
      0xfebf,0xfee7,0xff0f,0xff37,0xff5f,0xff87,0xffaf,0xffd7
};

inline void calculate8BitBackgroundLUT(color_chan_t * lut, uint8_t backgroundBrightness) {
    // update background table
    for(int i=0; i<256; i++)
        lut[i] = (lightPowerMap16bit[i] * backgroundBrightness) / 256;
}

// We use a 12-bit gamma correction table for RGB48, even though there's 16 bits per pixel - a 16-bit table would take up too much RAM and CPU
inline void calculate12BitBackgroundLUT(color_chan_t * lut, uint8_t backgroundBrightness) {
    // update background table
    for(int i=0; i<4096; i++)
        lut[i] = (lightPowerMap12to16bit[i] * backgroundBrightness) / 256;
}

template <typename RGB_IN>
void colorCorrection(const RGB_IN& in, rgb48& out) {
    out.red = lightPowerMap16bit[in.red];
    out.green = lightPowerMap16bit[in.green];
    out.blue = lightPowerMap16bit[in.blue];
}

template <typename RGB_IN>
void colorCorrection(const RGB_IN& in, rgb24& out) {
    out.red = lightPowerMap16bit[in.red] >> 8;
    out.green = lightPowerMap16bit[in.green] >> 8;
    out.blue = lightPowerMap16bit[in.blue] >> 8;
}

void calculate8BitBackgroundLUT(color_chan_t * lut, uint8_t backgroundBrightness);
void calculate12BitBackgroundLUT(color_chan_t * lut, uint8_t backgroundBrightness);

// config
typedef enum rotationDegrees {
    rotation0 = 0,
    rotation90 = 1,
    rotation180 = 2,
    rotation270 = 3
} rotationDegrees;

typedef enum ScrollMode {
    wrapForward = 0,
    bounceForward = 1,
    bounceReverse = 2,
    stopped = 3,
    off = 4,
    wrapForwardFromLeft = 5,
    peekForward = 6,
    peekReverse = 7
} ScrollMode;

#ifndef SWAPint
#define SWAPint(X,Y) { \
        int temp = X ; \
        X = Y ; \
        Y = temp ; \
    }
#endif

#define ROUND_UP_TO_MULTIPLE_OF_8(x) ((x + 7) &(-8))
#define ROUND_DOWN_TO_MULTIPLE_OF_8(x) (x&(-8))

#endif
